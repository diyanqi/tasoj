<?xml version="1.0" encoding="UTF-8"?>
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/"><generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
<item>
<title ><![CDATA[P1062]]></title>
<description ><![CDATA[在一个园形操场的四周站着N个傻子,现要将傻子有次序地合并成一堆.规定每次只能选相邻的2个傻子合并成新的一个傻子，并将新的一个傻子的RP数，记为该次合并的RP数。
（合并方法与NOI1999石子合并（本题库的沙子合并）相同，请大家参考上题合并方法）
将N个傻子合并成1个的最小RP数为RPn和最大RP数为RPx.
钟某人要合并他们，钟某人现在的RP为m,但是他要小心....
if&nbsp m&gt; RPx&nbsp then&nbsp 钟某人能很轻松的合并他们，并说出&nbsp ‘It&nbsp is&nbsp easy’
else&nbsp if&nbsp m&lt; RPn&nbsp 钟某人很担心，因为他必然由此变成一个沙茶，这时他要说：‘I&nbsp am..Sha...X’（以便提升RP）
else&nbsp &nbsp &nbsp 钟某人仍然担心自己可能成为一个沙茶，所以他要金蝉脱壳说：‘I&nbsp will&nbsp go&nbsp to&nbsp play&nbsp WarIII’
]]></description>
<input ><![CDATA[数据的第1行试正整数n和m(1≤N≤100,m在longint范围之内）表示有N个傻子.第2行有N个数,分别表示合并每个傻子的所掉的RP数
]]></input>
<output ><![CDATA[输出文件仅一行包含一个句子表示钟某人说的话。
]]></output>
<sample_input ><![CDATA[4 -9999
4 4 5 9
]]></sample_input>
<sample_output ><![CDATA[I am..Sha...X
]]></sample_output>
<time_limit ><![CDATA[出题人不告诉你是1S
]]></time_limit>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>
<hint ><![CDATA[傻子+傻子=?
]]></hint>
<source ><![CDATA[]]></source>
<test_input ><![CDATA[27 -999999
64348 64811 76365 69037 69815 58450 50328 87498 39255 22175 90134 69974 83631 51356 69368 30607 60040 45347 98409 80430 84084 5349 69325 1654 81508 91734 30616 
]]></test_input>
<test_input ><![CDATA[28 44967305
16052 113 51298 92065 38362 45615 95606 75675 19965 62492 14288 32708 24933 67287 22190 30945 22714 97337 31817 24906 5242 78677 4490 29297 17037 46022 24898 77967 
]]></test_input>
<test_input ><![CDATA[27 23398149
64348 64811 76365 69037 69815 58450 50328 87498 39255 22175 90134 69974 83631 51356 69368 30607 60040 45347 98409 80430 84084 5349 69325 1654 81508 91734 30616 
]]></test_input>
<test_input ><![CDATA[92 71776669

]]></test_input>
<test_input ><![CDATA[92 71776669

]]></test_input>
<test_input ><![CDATA[92 71776669

]]></test_input>
<test_input ><![CDATA[78 71941701
62115 89706 78601 50379 22000 97380 54601 45233 93196 18041 78345 51151 46554 75774 21075 93944 89395 85922 49151 64017 99125 73421 46441 16165 66275 17994 72714 75054 28684 86599 31151 76651 2276 71696 16946 83837 38230 98483 4336 28667 17630 262 75299 70123 33062 21962 39636 28918 59718 11738 69091 19912 15030 24107 16776 96108 25722 18598 50300 55758 4035 1866 64857 62140 81801 6207 87318 3172 96994 16558 18775 20965 44798 29906 97660 1162 11273 29013 
]]></test_input>
<test_input ><![CDATA[78 71941701
62115 89706 78601 50379 22000 97380 54601 45233 93196 18041 78345 51151 46554 75774 21075 93944 89395 85922 49151 64017 99125 73421 46441 16165 66275 17994 72714 75054 28684 86599 31151 76651 2276 71696 16946 83837 38230 98483 4336 28667 17630 262 75299 70123 33062 21962 39636 28918 59718 11738 69091 19912 15030 24107 16776 96108 25722 18598 50300 55758 4035 1866 64857 62140 81801 6207 87318 3172 96994 16558 18775 20965 44798 29906 97660 1162 11273 29013 
]]></test_input>
<test_input ><![CDATA[78 71941701
62115 89706 78601 50379 22000 97380 54601 45233 93196 18041 78345 51151 46554 75774 21075 93944 89395 85922 49151 64017 99125 73421 46441 16165 66275 17994 72714 75054 28684 86599 31151 76651 2276 71696 16946 83837 38230 98483 4336 28667 17630 262 75299 70123 33062 21962 39636 28918 59718 11738 69091 19912 15030 24107 16776 96108 25722 18598 50300 55758 4035 1866 64857 62140 81801 6207 87318 3172 96994 16558 18775 20965 44798 29906 97660 1162 11273 29013 
]]></test_input>
<test_input ><![CDATA[28 44967305
16052 113 51298 92065 38362 45615 95606 75675 19965 62492 14288 32708 24933 67287 22190 30945 22714 97337 31817 24906 5242 78677 4490 29297 17037 46022 24898 77967 
]]></test_input>
<test_output ><![CDATA[I am..Sha...X
]]></test_output>
<test_output ><![CDATA[It is easy
]]></test_output>
<test_output ><![CDATA[I will go to play WarIII
]]></test_output>
<test_output ><![CDATA[I will go to play WarIII
]]></test_output>
<test_output ><![CDATA[I will go to play WarIII
]]></test_output>
<test_output ><![CDATA[I will go to play WarIII
]]></test_output>
<test_output ><![CDATA[I will go to play WarIII
]]></test_output>
<test_output ><![CDATA[I will go to play WarIII
]]></test_output>
<test_output ><![CDATA[I will go to play WarIII
]]></test_output>
<test_output ><![CDATA[It is easy
]]></test_output>
</item>
</fps>
