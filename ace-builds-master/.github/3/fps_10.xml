<?xml version="1.0" encoding="UTF-8"?>
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/"><generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
<item>
<title ><![CDATA[P1060]]></title>
<description ><![CDATA[　　明明进了中学之后，学到了代数表达式。有一天，他碰到一个很麻烦的选择题。这个题目的题干中首先给出了一个代数表达式，然后列出了若干选项，每个选项也是一个代数表达式，题目的要求是判断选项中哪些代数表达式是和题干中的表达式等价的。&nbsp 

　　这个题目手算很麻烦，因为明明对计算机编程很感兴趣，所以他想是不是可以用计算机来解决这个问题。假设你是明明，能完成这个任务吗？&nbsp 



　　这个选择题中的每个表达式都满足下面的性质：&nbsp 

　　1．&nbsp &nbsp 表达式只可能包含一个变量‘a’。&nbsp 

　　2．&nbsp &nbsp 表达式中出现的数都是正整数，而且都小于10000。&nbsp 

　　3．&nbsp &nbsp 表达式中可以包括四种运算‘+’（加），‘-’（减），‘*’（乘），‘^’（乘幂），以及小括号‘(’，‘)’。小括号的优先级最高，其次是‘^’，然后是‘*’，最后是‘+’和‘-’。‘+’和‘-’的优先级是相同的。相同优先级的运算从左到右进行。（注意：运算符‘+’，‘-’，‘*’，‘^’以及小括号‘(’，‘)’都是英文字符）&nbsp 

　　4．&nbsp &nbsp 幂指数只可能是1到10之间的正整数（包括1和10）。&nbsp 

　　5．&nbsp &nbsp 表达式内部，头部或者尾部都可能有一些多余的空格。&nbsp 

　　下面是一些合理的表达式的例子：&nbsp 

((a^1)&nbsp ^&nbsp 2)^3，a*a+a-a，((a+a))，9999+(a-a)*a，1&nbsp +&nbsp (a&nbsp -1)^3，1^10^9……&nbsp 


对于30%的数据，表达式中只可能出现两种运算符‘+’和‘-’；&nbsp 

对于其它的数据，四种运算符‘+’，‘-’，‘*’，‘^’在表达式中都可能出现。&nbsp 

对于全部的数据，表达式中都可能出现小括号‘(’和‘)’。&nbsp 
]]></description>
<input ><![CDATA[　　输入的第一行给出的是题干中的表达式。第二行是一个整数n（2&nbsp &lt; =&nbsp n&nbsp &lt; =&nbsp 26），表示选项的个数。后面n行，每行包括一个选项中的表达式。这n个选项的标号分别是A，B，C，D……&nbsp 

　　输入中的表达式的长度都不超过50个字符，而且保证选项中总有表达式和题干中的表达式是等价的。&nbsp 
]]></input>
<output ><![CDATA[　　输出包括一行，这一行包括一系列选项的标号，表示哪些选项是和题干中的表达式等价的。选项的标号按照字母顺序排列，而且之间没有空格。&nbsp 
]]></output>
<sample_input ><![CDATA[(a+1)^2
3
(a-1)^2+4*a
a+1+a
a^2+2*a*1+1^2+10-10+a-a
]]></sample_input>
<sample_output ><![CDATA[AC
]]></sample_output>
<time_limit ><![CDATA[各个测试点1s
]]></time_limit>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>
<hint ><![CDATA[]]></hint>
<source ><![CDATA[]]></source>
<test_input ><![CDATA[a + (1 +5)
8
((a + 1 + 5))
1 + 5 + a
a + a + 1 + 1 + 5 + 6
a-(a + 1) + 1+1+5+12-12  +6-6+a-(8 -8)
1023 + a + 5 - 1022
6 -(6-(9-(9-(8-(5+8))))) -(a -5) +a +1+5+a
9+9+4+6+9+1-9-5-1-(8-7)
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+a+ 5
]]></test_input>
<test_input ><![CDATA[10 - 9 + 8 -7 -((5 + (4 + 3+1-(1-2))))
8
9+9+4+6+9+1-9-5-1-(8-7)
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+1+ 8
1-13
  6                                    
((1 +5)-1-8-7-( 5-(8 +7))-(9999   -9990)- 3
6+9+8+5+9+2+4+1+8+3+9+3+8+3+7+8 -6-8+9+4+1+1+7+6+1
1-1-1-1-1-1-1-1-1-1-1-1-1-1  
12
]]></test_input>
<test_input ><![CDATA[10 + (1 -a) +(a +8)-(9-8)
10
9+9+9+8+9+1-9-5-1-(8-8)
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+6+ 5
1-13
  6                                    
((6 +1)-6-a-8-( 1-(a +8))-(9999   -9990)- 3
6+9+8+5+9+2+4+1+8+3+9+3+a+3+8+7 -8-6+8+9+4+1+1+7+6
1-1-1-1-1-1-1-1-1-1-1-1-1-1  
12
10+8
8+10
]]></test_input>
<test_input ><![CDATA[(a +1+5)^3
26
9+9+4+6+9+1-9-5-1-(8-7)
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+a+ 5
1-13
(a +1+5)*(a^2 +1^2+5^2-(1-2*a*1-1)+2*5*(a+1))
  6                                    
((a +1)-a-8-7-( 1-(8 +7))-(9999   -9990)- 3
6+9+8+5+9+2+4+1+8+3+9+3+8+3+7+8 -6-8+9+4+1+1+7+6+a
1-1-1-1-1-1-1-1-1-1-1-1-1-1  
12
10+7
7+10
((6^1) ^ 2)^3
(a +3*(1+5))*a^2+((1+5)*2*(1+5)+(1+5)^2)*a+(1+5)^3
6*9+6-6
((6+9))
9999+(9-8)*8
1 + (8 -7)^3
4^10
((a + 1 + 5))
1 + 5 + a
(a+ 1)^3+3*(a +1)^2*5+3*(a+1)*5  * 5+(a+1)^3^1
a + a + 1 + 1 + 5 + 6
a-(a + 1) + 1+1+5+12-12  +6-6+a-(8 -8)
1023 + a + 5 - 1022
6 -(6-(9-(9-(8-(5+8))))) -(a -5) +a +1+5+a
9999 + 6^1^10-11*101*9 -6^2^5-(1 -a-1-5-1)^3
]]></test_input>
<test_input ><![CDATA[(a -6)^10^10
26
(2^10^10-(2048^9 *2)-6+a^1)^2^5^2^5
6+6+9+8+3+1-5-8-1-(9-8)
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+6+ 5
(6 +1+5)*(6^2 +1^2+5^2-(1-2*6*1-1)+2*5*(6+1))
  a                                    
((6 +1)-6-3-8-( 1-(3 +8))-(9999   -9990)- 3
a+6+9+8+5+9+2+4+1+8+3+9+3+9+8+7 -8-6+8+9+4+1+1+7+6
1-1-1-1-1-1-1-1-1-1-1-1-1-1  
((a^1) ^ 2)^3
(6 +3*(1+5))*6^2+((1+5)*2*(1+5)+(1+5)^2)*6+(1+5)^3
a*6+8-a
((a+6))
(a^2 - 2*a*6+6^1*6^1)^5^10
((a+6)^2 - 4*a*6))^10^5 +(a -a)^10^10^10^10^10^10
(a^3-3*a*6*(a-6) - 6^3)^4^8 *(a^2-2*a*6+6^2)^2
9999+(6-9)*6
1 + (3 -8)^3
9^10^9
((6 + 1 + 5))
1 + 5 + 6
(6+ 1)^3+3*(6 +1)^2*5+3*(6+1)*5  * 5+(6+1)^3^1
6 + 6 + 1 + 1 + 5 + a
6-(6 + 1) + 1+1+5+12-12  +a-a+6-(3 -3)
1023 + 6 + 5 - 1022
a -(a-(6-(6-(9-(8+9))))) -(6 -8) +6 +1+5+6
9999 + a^10^10-11*101*9 -a^2^ 5^5^2-(1 -6-1-5-1)^3
]]></test_input>
<test_input ><![CDATA[a^4-4*a^3*8+6*a^2*8^2-4*a*8^3+8^4
26
(2^10 * 4-(2048*2)-9+6^1)^3
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+6+ 5
(6 +1+5)*(6^2 +1^2+5^2-(1-2*6*1-1)+2*5*(6+1))
((6 +1)-6-a-8-( 1-(a +8))-(9999   -9990)- 3
6+9+8+5+9+2+4+1+8+3+9+3+a+3+8+7 -8-6+8+9+4+1+1+7+6
1-1-1-1-1-1-1-1-1-1-1-1-1-1  
((6^1) ^ 2)^3
(8-a)^4
(8+a)^4-(8*a^3*8+2^3*a*8^3)
(6 +3*(1+5))*6^2+((1+5)*2*(1+5)+(1+5)^2)*6+(1+5)^3
(6^2 - 2*6*9+9^1*9^1)^3
((6+9)^2 - 4*6*9))^7 +(6 -6)^10
(6^3-3*6*9*(6-9) - 9^3)^5 *(6^2-2*6*9+9^2)^2
9999+(9-8)*6
1 + (a -8)^3
9^3^3
((6 + 1 + 5))
1 + 5 + 6
8*8*8*8+a*a*a*a+4*a*8*(1-1-(a*a+8*8))+6*a*8*a*8
(8 - a)*(a -8)*(8 -a)*(8 -a)
(6+ 1)^3+3*(6 +1)^2*5+3*(6+1)*5  * 5+(6+1)^3^1
6 + 6 + 1 + 1 + 5 + 6
6-(6 + 1) + 1+1+5+12-12  +6-6+6-(a -a)
1023 + 6 + 5 - 1022
6 -(6-(9-(9-(8-(5+8))))) -(6 -5) +6 +1+5+6
9999 + 6^10-11*101*9 -6^2^ 5-(1 -6-1-5-1)^3
]]></test_input>
<test_input ><![CDATA[1 -a*(2-a*(3-a*(4-a*(5-a*(6-a*(7-a*(8-a*9)))))))
26
(2^10 * 4-(2048*2)-9+6^1)^3
1-2*a^1+3*a^2-4*a^3+5*a^4-6*a^5+7*a^6-8*a^7+9*a^8
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+a+ 5
(a +1+5)*(a^2 +1^2+5^2-(1-2*a*1-1)+2*5*(a+1))
((a +1)-a-8-7-( 1-(8 +7))-(9999   -9990)- 3
6+9+8+5+9+2+4+1+8+3+9+3+8+3+7+8 -6-8+9+4+1+1+7+6+a
((6^1) ^ 2)^3
(7-8)^4
1-2*a^1+3*a^2-4*a^3+5*a^4-a^5*(6-7*a+8*a^2 -9*a^3)
(7+8)^4-(8*8^3*7+2^3*8*7^3)
(a +3*(1+5))*a^2+((1+5)*2*(1+5)+(1+5)^2)*a+(1+5)^3
(6^2 - 2*6*9+9^1*9^1 - 10)^5^10
((6+9)^2 - 4*6*9)- 10)^10^5 +(6 -6)^10^10^10^10^10
(6^3-3*6*9*(6-9) - 9^3+28)^4^8 *(6^2-2*6*9+9^2)^2
9999+(9-8)*8
1 + (8 -7)^3
4^7
(1-a)^2+2*a^2-4*a^3+5*a^4-6*a^5+7*a^6-8*a^7+9*a^8
7*7*7*7+8*8*8*8+4*8*7*(1-1-(8*8+7*7))+6*8*7*8*7
(7 - 8)*(8 -7)*(7 -8)*(7 -8)
(a+ 1)^3+3*(a +1)^2*5+3*(a+1)*5  * 5+(a+1)^3^1
a-(a + 1) + 1+1+5+12-12  +6-6+a-(8 -8)
1023 + a + 5 - 1022
6 -(6-(9-(9-(8-(5+8))))) -(a -5) +a +1+5+a
9999 + 6^10-11*101*9 -6^2^ 5-(1 -a-1-5-1)^3
6-2*a^1+3*a^2-4*a^3+5*a^4-6*a^5+7*a^6-8*a^7+9*a^8
]]></test_input>
<test_input ><![CDATA[a -a +1+(9-9)^2^9
26
(2^10 * 4-(2048*2)-9+6^1)^3
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+6+ 5
(6 +1+5)*(6^2 +1^2+5^2-(1-2*6*1-1)+2*5*(6+1))
((6 +1)-6-3-8-( 1-(3 +8))-(9999   -9990)- 3
(8-3)^4
1-2*6^1+3*6^2-4*6^3+5*6^4-6^5*(6-7*6+8*6^2 -9*6^3)
(8+3)^4-(8*3^3*8+2^3*3*8^3)
(6 +3*(1+5))*6^2+((1+5)*2*(1+5)+(1+5)^2)*6+(1+5)^3
(a^2 - 2*a*6+6^1*6^1)^4
((a+6)^2 - 4*a*6))^2 +(a -a)^9
(a^3-3*a*6*(a-6) - 6^3)^9 *(a^2-2*a*6+6^2)^2
9999+(6-9)*6
1 + (3 -8)^3
a^10^7 +2-1
a - 1+2
1
a -a + 1 +(a -a)^7
(1-6)^2+2*6^2-4*6^3+5*6^4-6*6^5+7*6^6-8*6^7+9*6^8
8*8*8*8+3*3*3*3+4*3*8*(1-1-(3*3+8*8))+6*3*8*3*8
(8 - 3)*(3 -8)*(8 -3)*(8 -3)
(6+ 1)^3+3*(6 +1)^2*5+3*(6+1)*5  * 5+(6+1)^3^1
6-(6 + 1) + 1+1+5+12-12  +a-a+6-(3 -3)
1023 + 6 + 5 - 1022
a -(a-(6-(6-(9-(8+9))))) -(6 -8) +6 +1+5+6
9999 + a^10^10-11*101*9 -a^2^ 5^5^2-(1 -6-1-5-1)^3
a^10^10-6^2 + 1
]]></test_input>
<test_input ><![CDATA[1-(a^8 - 1) * 1 * (a^8 +1) * 1*1*1*1*1*(1-2)-1
26
(2^10^10-(2048^9 *2)-9+6^1)^2
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+a+ 5
(a +1+5)*(a^2 +1^2+5^2-(1-2*a*1-1)+2*5*(a+1))
((a +1)-a-8-7-( 1-(8 +7))-(9999   -9990)- 3
1-2*a^1+3*a^2-4*a^3+5*a^4-a^5*(6-7*a+8*a^2 -9*a^3)
(7+8)^4-(8*8^3*7+2^3*8*7^3)
(a^8+1)^2 -2*(1 + a^8)
(a +3*(1+5))*a^2+((1+5)*2*(1+5)+(1+5)^2)*a+(1+5)^3
(6^2 - 2*6*9+9^1*9^1)^5
((6+9)^2 - 4*6*9))^5 +(6 -6)^10^10^10^10^10^10
(6^3-3*6*9*(6-9) - 9^3)^4^8 *(6^2-2*6*9+9^2)^2
9999+(9-8)*8
a^2^2^2^2-1
6^10^10 +2-1
a^2^2^2^2^2-1
6 -6 + 1 +(6 -6)^10^7
(1-a)^2+2*a^2-4*a^3+5*a^4-6*a^5+7*a^6-8*a^7+9*a^8
7*7*7*7+8*8*8*8+4*8*7*(1-1-(8*8+7*7))+6*8*7*8*7
(7 - 8)*(8 -7)*(7 -8)*(7 -8)
(a+ 1)^3+3*(a +1)^2*5+3*(a+1)*5  * 5+(a+1)^3^1
9999^9^9-9^9^9*1111^9^9-(1-a^8)*(1+a^8) +9
a-(a + 1) + 1+1+5+12-12  +6-6+a-(8 -8)
1023 + a + 5 - 1022
6 -(6-(9-(9-(8-(5+8))))) -(a -5) +a +1+5+a
9999 + 6^10^10-11*101*9 -6^2^ 5^5^2-(1 -a-1-5-1)^3
6^10^10-9^10^10 + 1
]]></test_input>
<test_input ><![CDATA[(1000+24)^3*8*a*6^6*9*(3*a^2 + 4*9^2)*(a^2+12*9^2)
26
(2^10 * 4-(2048*2)-9+6^1)^3
9999 + 9999+9999+9999-(9999 + 9999+9999+9999)+6+ 5
(6 +1+5)*(6^2 +1^2+5^2-(1-2*6*1-1)+2*5*(6+1))
((6 +1)-6-3-8-( 1-(3 +8))-(9999   -9990)- 3
1-2*6^1+3*6^2-4*6^3+5*6^4-6^5*(6-7*6+8*6^2 -9*6^3)
(8+3)^4-(8*3^3*8+2^3*3*8^3)
(6^8+1)^2 -2*(1 + 6^8)
(6 +3*(1+5))*6^2+((1+5)*2*(1+5)+(1+5)^2)*6+(1+5)^3
(a^2 - 2*a*6+6^1*6^1)^5
((a+6)^2 - 4*a*6))^5 +(a -a)^10^7
(a^3-3*a*6*(a-6) - 6^3)^4^8 *(a^2-2*a*6+6^2)^2
9999+(6-9)*6
6^2^2-1
a^10^10 +2-1
6^2^2^2-1
a -a + 1 +(a -a)^10^9^8^7^6^5^4^3^2
(1-6)^2+2*6^2-4*6^3+5*6^4-6*6^5+7*6^6-8*6^7+9*6^8
8*8*8*8+3*3*3*3+4*3*8*(1-1-(3*3+8*8))+6*3*8*3*8
(8 - 3)*(3 -8)*(8 -3)*(8 -3)
2^5^6*(7*a*6^6*9*(3*a^2 + 4*9^2)*(a^2 + 12*9^2))
2^5^6*(4*a*6^6*9*(3*a^2 + 8*9^2)*(a^2 + 12*9^2))
2^5^6*(24*a^5*6^6*9+320*a^3*6^6*9^3+384*a*6^6*9^5)
2^5^6*(24*a^5*6^6*9+320*a^2*6^6*9^3+384*a*6^6*9^5)
2^5^6*2*a*6^3*(a^2+12*9^2)*4*6^3*9*(3*a^2 + 4*9^2)
2^5^6*4*a*6^3*(a^2+12*9^2)*2*6^3*9*(3*a^2 + 4*9^2)
2^5^6*2*a*6^3*(a^2+21*9^2)*4*6^3*9*(3*a^2 + 4*9^2)
]]></test_input>
<test_output ><![CDATA[ABDEF
]]></test_output>
<test_output ><![CDATA[CEG
]]></test_output>
<test_output ><![CDATA[IJ
]]></test_output>
<test_output ><![CDATA[DMZ
]]></test_output>
<test_output ><![CDATA[AMNO
]]></test_output>
<test_output ><![CDATA[HIS
]]></test_output>
<test_output ><![CDATA[BIR
]]></test_output>
<test_output ><![CDATA[PQ
]]></test_output>
<test_output ><![CDATA[GM
]]></test_output>
<test_output ><![CDATA[VXY
]]></test_output>
</item>
</fps>
