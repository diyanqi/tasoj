<?xml version="1.0" encoding="UTF-8"?>
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/"><generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
<item>
<title ><![CDATA[P1055]]></title>
<description ><![CDATA[&nbsp &nbsp &nbsp &nbsp 设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将这N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为&nbsp 1&nbsp &nbsp 3&nbsp &nbsp 5&nbsp &nbsp 2&nbsp 我们可以先合并1、2堆，代价为4，得到4&nbsp 5&nbsp 2&nbsp 又合并&nbsp 1，2堆，代价为9，得到9&nbsp 2&nbsp ，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4&nbsp 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。
]]></description>
<input ><![CDATA[第一行一个数N表示沙子的堆数N。
第二行N个数，表示每堆沙子的质量。&nbsp &lt; =1000
]]></input>
<output ><![CDATA[合并的最小代价
]]></output>
<sample_input ><![CDATA[4
1 3 5 2
]]></sample_input>
<sample_output ><![CDATA[22
]]></sample_output>
<time_limit ><![CDATA[各个测试点1s
]]></time_limit>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>
<hint ><![CDATA[]]></hint>
<source ><![CDATA[]]></source>
<test_input ><![CDATA[2
548 592
]]></test_input>
<test_input ><![CDATA[300
548 592 715 844 602 857 544 847 423 623 645 384 437 297 891 56 963 272 383 477 791 812 528 479 568 392 925 836 71 337 87 648 20 368 832 957 778 140 870 870 978 473 799 800 461 520 780 678 118 720 639 582 143 537 944 758 521 105 414 473 264 186 774 736 456 216 568 135 18 324 617 149 612 222 616 386 943 902 681 449 359 613 437 902 697 99 60 969 666 653 670 170 210 358 128 750 315 607 363 325 570 38 438 634 988 958 102 652 208 635 161 995 653 581 253 414 466 474 244 623 158 338 110 674 656 317 138 778 196 949 368 662 820 13 97 622 837 673 96 971 976 878 468 509 976 55 604 451 739 19 39 441 282 979 120 359 296 480 118 688 317 880 414 918 64 216 692 565 566 865 265 508 523 916 93 921 575 83 929 277 318 9 667 842 131 647 716 841 289 264 183 397 586 552 20 164 828 369 4 146 677 569 270 703 735 288 962 433 248 756 576 396 592 896 572 638 223 891 952 680 447 449 846 978 699 116 297 767 813 411 396 675 881 249 581 313 881 965 692 588 725 659 501 533 956 230 643 394 423 618 606 474 19 470 301 716 660 287 290 383 618 749 428 878 135 102 298 92 569 354 590 551 574 33 653 968 652 320 431 221 896 141 367 97 435 984 891 260 806 537 703 447 100 99 919 352 714 469 998 841
]]></test_input>
<test_input ><![CDATA[3
548 592 715
]]></test_input>
<test_input ><![CDATA[5
548 592 715 844 602
]]></test_input>
<test_input ><![CDATA[10
548 592 715 844 602 857 544 847 423 623
]]></test_input>
<test_input ><![CDATA[50
548 592 715 844 602 857 544 847 423 623 645 384 437 297 891 56 963 272 383 477 791 812 528 479 568 392 925 836 71 337 87 648 20 368 832 957 778 140 870 870 978 473 799 800 461 520 780 678 118 720
]]></test_input>
<test_input ><![CDATA[100
548 592 715 844 602 857 544 847 423 623 645 384 437 297 891 56 963 272 383 477 791 812 528 479 568 392 925 836 71 337 87 648 20 368 832 957 778 140 870 870 978 473 799 800 461 520 780 678 118 720 639 582 143 537 944 758 521 105 414 473 264 186 774 736 456 216 568 135 18 324 617 149 612 222 616 386 943 902 681 449 359 613 437 902 697 99 60 969 666 653 670 170 210 358 128 750 315 607 363 325
]]></test_input>
<test_input ><![CDATA[150
548 592 715 844 602 857 544 847 423 623 645 384 437 297 891 56 963 272 383 477 791 812 528 479 568 392 925 836 71 337 87 648 20 368 832 957 778 140 870 870 978 473 799 800 461 520 780 678 118 720 639 582 143 537 944 758 521 105 414 473 264 186 774 736 456 216 568 135 18 324 617 149 612 222 616 386 943 902 681 449 359 613 437 902 697 99 60 969 666 653 670 170 210 358 128 750 315 607 363 325 570 38 438 634 988 958 102 652 208 635 161 995 653 581 253 414 466 474 244 623 158 338 110 674 656 317 138 778 196 949 368 662 820 13 97 622 837 673 96 971 976 878 468 509 976 55 604 451 739 19
]]></test_input>
<test_input ><![CDATA[200
548 592 715 844 602 857 544 847 423 623 645 384 437 297 891 56 963 272 383 477 791 812 528 479 568 392 925 836 71 337 87 648 20 368 832 957 778 140 870 870 978 473 799 800 461 520 780 678 118 720 639 582 143 537 944 758 521 105 414 473 264 186 774 736 456 216 568 135 18 324 617 149 612 222 616 386 943 902 681 449 359 613 437 902 697 99 60 969 666 653 670 170 210 358 128 750 315 607 363 325 570 38 438 634 988 958 102 652 208 635 161 995 653 581 253 414 466 474 244 623 158 338 110 674 656 317 138 778 196 949 368 662 820 13 97 622 837 673 96 971 976 878 468 509 976 55 604 451 739 19 39 441 282 979 120 359 296 480 118 688 317 880 414 918 64 216 692 565 566 865 265 508 523 916 93 921 575 83 929 277 318 9 667 842 131 647 716 841 289 264 183 397 586 552 20 164 828 369 4 146
]]></test_input>
<test_input ><![CDATA[250
548 592 715 844 602 857 544 847 423 623 645 384 437 297 891 56 963 272 383 477 791 812 528 479 568 392 925 836 71 337 87 648 20 368 832 957 778 140 870 870 978 473 799 800 461 520 780 678 118 720 639 582 143 537 944 758 521 105 414 473 264 186 774 736 456 216 568 135 18 324 617 149 612 222 616 386 943 902 681 449 359 613 437 902 697 99 60 969 666 653 670 170 210 358 128 750 315 607 363 325 570 38 438 634 988 958 102 652 208 635 161 995 653 581 253 414 466 474 244 623 158 338 110 674 656 317 138 778 196 949 368 662 820 13 97 622 837 673 96 971 976 878 468 509 976 55 604 451 739 19 39 441 282 979 120 359 296 480 118 688 317 880 414 918 64 216 692 565 566 865 265 508 523 916 93 921 575 83 929 277 318 9 667 842 131 647 716 841 289 264 183 397 586 552 20 164 828 369 4 146 677 569 270 703 735 288 962 433 248 756 576 396 592 896 572 638 223 891 952 680 447 449 846 978 699 116 297 767 813 411 396 675 881 249 581 313 881 965 692 588 725 659 501 533 956 230 643 394 423 618
]]></test_input>
<test_output ><![CDATA[1140
]]></test_output>
<test_output ><![CDATA[1252577
]]></test_output>
<test_output ><![CDATA[2995
]]></test_output>
<test_output ><![CDATA[7742
]]></test_output>
<test_output ><![CDATA[21971
]]></test_output>
<test_output ><![CDATA[161451
]]></test_output>
<test_output ><![CDATA[343850
]]></test_output>
<test_output ><![CDATA[554773
]]></test_output>
<test_output ><![CDATA[752088
]]></test_output>
<test_output ><![CDATA[1019821
]]></test_output>
</item>
</fps>
