{"title": "Guess Your Way Out!", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Guess Your Way Out!</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Amr bought a new video game \"Guess Your Way Out!\". The goal of the game is to find an exit from the maze that looks like a perfect binary tree of height <span class=\"tex-span\"><i>h</i></span>. The player is initially standing at the root of the tree and the exit from the tree is located at some leaf node. </p><p>Let's index all the leaf nodes from the left to the right from 1 to <span class=\"tex-span\">2<sup class=\"upper-index\"><i>h</i></sup></span>. The exit is located at some node <span class=\"tex-span\"><i>n</i></span> where <span class=\"tex-span\">1&le;<i>n</i>&le;2<sup class=\"upper-index\"><i>h</i></sup></span>, the player doesn't know where the exit is so he has to guess his way out!</p><p>Amr follows simple algorithm to choose the path. Let's consider infinite command string \"<span class=\"tex-font-style-tt\">LRLRLRLRL...</span>\" (consisting of alternating characters '<span class=\"tex-font-style-tt\">L</span>' and '<span class=\"tex-font-style-tt\">R</span>'). Amr sequentially executes the characters of the string using following rules:</p><ul> <li> Character '<span class=\"tex-font-style-tt\">L</span>' means \"go to the left child of the current node\"; </li><li> Character '<span class=\"tex-font-style-tt\">R</span>' means \"go to the right child of the current node\"; </li><li> If the destination node is already visited, Amr skips current command, otherwise he moves to the destination node; </li><li> If Amr skipped two consecutive commands, he goes back to the parent of the current node before executing next command; </li><li> If he reached a leaf node that is not the exit, he returns to the parent of the current node; </li><li> If he reaches an exit, the game is finished. </li></ul><p>Now Amr wonders, if he follows this algorithm, how many nodes he is going to visit before reaching the exit?</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>Input consists of two integers <span class=\"tex-span\"><i>h</i>,<i>n</i></span> (<span class=\"tex-span\">1&le;<i>h</i>&le;50</span>, <span class=\"tex-span\">1&le;<i>n</i>&le;2<sup class=\"upper-index\"><i>h</i></sup></span>).</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output a single integer representing the number of nodes (excluding the exit node) Amr is going to visit before reaching the exit by following this algorithm.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>1 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2</pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>2 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>5</pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3 6<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>10</pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>10 1024<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2046</pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>A perfect binary tree of height <span class=\"tex-span\"><i>h</i></span> is a binary tree consisting of <span class=\"tex-span\"><i>h</i>+1</span> levels. Level <span class=\"tex-span\">0</span> consists of a single node called <span class=\"tex-font-style-it\">root</span>, level <span class=\"tex-span\"><i>h</i></span> consists of <span class=\"tex-span\">2<sup class=\"upper-index\"><i>h</i></sup></span> nodes called <span class=\"tex-font-style-it\">leaves</span>. Each node that is not a leaf has exactly two children, <span class=\"tex-font-style-it\">left</span> and <span class=\"tex-font-style-it\">right</span> one. </p><p>Following picture illustrates the sample test number <span class=\"tex-span\">3</span>. Nodes are labeled according to the order of visit.</p><p><img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/a9c04df05682cc0d7dd5d3264a92b3b78d80998016.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}