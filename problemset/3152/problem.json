{"title": "On Iteration of One Well-Known Function", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. On Iteration of One Well-Known Function</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Of course, many of you can calculate <span class=\"tex-span\">&phi;(<i>n</i>)</span> &minus; the number of positive integers that are less than or equal to <span class=\"tex-span\"><i>n</i></span>, that are coprime with <span class=\"tex-span\"><i>n</i></span>. But what if we need to calculate <span class=\"tex-span\">&phi;(&phi;(...&phi;(<i>n</i>)))</span>, where function <span class=\"tex-span\">&phi;</span> is taken <span class=\"tex-span\"><i>k</i></span> times and <span class=\"tex-span\"><i>n</i></span> is given in the canonical decomposition into prime factors? </p><p>You are given <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span>, calculate the value of <span class=\"tex-span\">&phi;(&phi;(...&phi;(<i>n</i>)))</span>. Print the result in the canonical decomposition into prime factors.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains integer <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1&le;<i>m</i>&le;10<sup class=\"upper-index\">5</sup></span>) &minus; the number of distinct prime divisors in the canonical representaion of <span class=\"tex-span\"><i>n</i></span>.</p><p>Each of the next <span class=\"tex-span\"><i>m</i></span> lines contains a pair of space-separated integers <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i></sub>,<i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">2&le;<i>p</i><sub class=\"lower-index\"><i>i</i></sub>&le;10<sup class=\"upper-index\">6</sup>;1&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>&le;10<sup class=\"upper-index\">17</sup></span>) &minus; another prime divisor of number <span class=\"tex-span\"><i>n</i></span> and its power in the canonical representation. The sum of all <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> doesn't exceed <span class=\"tex-span\">10<sup class=\"upper-index\">17</sup></span>. Prime divisors in the input follow in the strictly increasing order.</p><p>The last line contains integer <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1&le;<i>k</i>&le;10<sup class=\"upper-index\">18</sup></span>).</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line, print integer <span class=\"tex-span\"><i>w</i></span> &minus; the number of distinct prime divisors of number <span class=\"tex-span\">&phi;(&phi;(...&phi;(<i>n</i>)))</span>, where function <span class=\"tex-span\">&phi;</span> is taken <span class=\"tex-span\"><i>k</i></span> times.</p><p>Each of the next <span class=\"tex-span\"><i>w</i></span> lines must contain two space-separated integers <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>i</i></sub>,<i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> <span class=\"tex-span\">(<i>b</i><sub class=\"lower-index\"><i>i</i></sub>&ge;1)</span> &minus; another prime divisor and its power in the canonical representaion of the result. Numbers <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>i</i></sub></span> must go in the strictly increasing order.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>1<br/>7 1<br/>1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/>2 1<br/>3 1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>1<br/>7 1<br/>2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1<br/>2 1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>1<br/>2 100000000000000000<br/>10000000000000000<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1<br/>2 90000000000000000<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>You can read about canonical representation of a positive integer here: <span class=\"tex-font-style-tt\">http://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic</span>.</p><p>You can read about function <span class=\"tex-span\">&phi;(<i>n</i>)</span> here: <span class=\"tex-font-style-tt\">http://en.wikipedia.org/wiki/Euler's_totient_function</span>.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}