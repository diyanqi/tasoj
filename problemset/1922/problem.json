{"title": "Sea Battle", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">D. Sea Battle</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Galya is playing one-dimensional Sea Battle on a <span class=\"tex-span\">1&times;<i>n</i></span> grid. In this game <span class=\"tex-span\"><i>a</i></span> ships are placed on the grid. Each of the ships consists of <span class=\"tex-span\"><i>b</i></span> consecutive cells. No cell can be part of two ships, however, the ships <span class=\"tex-font-style-bf\">can touch</span> each other.</p><p>Galya doesn't know the ships location. She can shoot to some cells and after each shot she is told if that cell was a part of some ship (this case is called \"hit\") or not (this case is called \"miss\").</p><p>Galya has already made <span class=\"tex-span\"><i>k</i></span> shots, all of them were misses.</p><p>Your task is to calculate the minimum number of cells such that if Galya shoot at all of them, she would hit at least one ship.</p><p>It is guaranteed that there is at least one valid ships placement.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains four positive integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>a</i></span>, <span class=\"tex-span\"><i>b</i></span>, <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;2&middot;10<sup class=\"upper-index\">5</sup></span>, <span class=\"tex-span\">1&le;<i>a</i>,<i>b</i>&le;<i>n</i></span>, <span class=\"tex-span\">0&le;<i>k</i>&le;<i>n</i>-1</span>)&minus; the length of the grid, the number of ships on the grid, the length of each ship and the number of shots Galya has already made.</p><p>The second line contains a string of length <span class=\"tex-span\"><i>n</i></span>, consisting of zeros and ones. If the <span class=\"tex-span\"><i>i</i></span>-th character is one, Galya has already made a shot to this cell. Otherwise, she hasn't. It is guaranteed that there are exactly <span class=\"tex-span\"><i>k</i></span> ones in this string. </p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line print the minimum number of cells such that if Galya shoot at all of them, she would hit at least one ship.</p><p>In the second line print the cells Galya should shoot at.</p><p>Each cell should be printed exactly once. You can print the cells in arbitrary order. The cells are numbered from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>, starting from the left.</p><p>If there are multiple answers, you can print any of them.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>5 1 2 1<br/>00100<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/>4 2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>13 3 2 3<br/>1000000010001<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/>7 11<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>There is one ship in the first sample. It can be either to the left or to the right from the shot Galya has already made (the \"<span class=\"tex-font-style-tt\">1</span>\" character). So, it is necessary to make two shots: one at the left part, and one at the right part.</p></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}