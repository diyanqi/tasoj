{"title": "Memory and De-Evolution", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Memory and De-Evolution</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Memory is now interested in the de-evolution of objects, specifically triangles. He starts with an equilateral triangle of side length <span class=\"tex-span\"><i>x</i></span>, and he wishes to perform operations to obtain an equilateral triangle of side length <span class=\"tex-span\"><i>y</i></span>.</p><p>In a single second, he can modify the length of a single side of the current triangle such that it remains a non-degenerate triangle (triangle of positive area). At any moment of time, the length of each side should be integer.</p><p>What is the minimum number of seconds required for Memory to obtain the equilateral triangle of side length <span class=\"tex-span\"><i>y</i></span>?</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first and only line contains two integers <span class=\"tex-span\"><i>x</i></span> and <span class=\"tex-span\"><i>y</i></span> (<span class=\"tex-span\">3&le;<i>y</i>&lt;<i>x</i>&le;100000</span>)&minus; the starting and ending equilateral triangle side lengths respectively.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer&minus; the minimum number of seconds required for Memory to obtain the equilateral triangle of side length <span class=\"tex-span\"><i>y</i></span> if he starts with the equilateral triangle of side length <span class=\"tex-span\"><i>x</i></span>.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>6 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>8 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>22 4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>6<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample test, Memory starts with an equilateral triangle of side length <span class=\"tex-span\">6</span> and wants one of side length <span class=\"tex-span\">3</span>. Denote a triangle with sides <span class=\"tex-span\"><i>a</i></span>, <span class=\"tex-span\"><i>b</i></span>, and <span class=\"tex-span\"><i>c</i></span> as <span class=\"tex-span\">(<i>a</i>,<i>b</i>,<i>c</i>)</span>. Then, Memory can do <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/7823c31c27139a382b61aee582fd451f8c07905b40.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p><p>In the second sample test, Memory can do <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/22b2088d2e869848a78af18576dbfab0233bdbc240.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p><p>In the third sample test, Memory can do: <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/59f9f1033e37dcff494a7de4ca5155e95e34da4340.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></p><p><img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/7b1a1db6a7ff1635c9d24429cfe7208048f6d0f240.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}