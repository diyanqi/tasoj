{"title": "Bear and Up-Down", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Bear and Up-Down</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>The life goes up and down, just like nice sequences. Sequence <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">1</sub>,<i>t</i><sub class=\"lower-index\">2</sub>,...,<i>t</i><sub class=\"lower-index\"><i>n</i></sub></span> is called <span class=\"tex-font-style-it\">nice</span> if the following two conditions are satisfied: </p><ul> <li> <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub>&lt;<i>t</i><sub class=\"lower-index\"><i>i</i>+1</sub></span> for each odd <span class=\"tex-span\"><i>i</i>&lt;<i>n</i></span>; </li><li> <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub>&gt;<i>t</i><sub class=\"lower-index\"><i>i</i>+1</sub></span> for each even <span class=\"tex-span\"><i>i</i>&lt;<i>n</i></span>. </li></ul><p>For example, sequences <span class=\"tex-span\">(2,8)</span>, <span class=\"tex-span\">(1,5,1)</span> and <span class=\"tex-span\">(2,5,1,100,99,120)</span> are nice, while <span class=\"tex-span\">(1,1)</span>, <span class=\"tex-span\">(1,2,3)</span> and <span class=\"tex-span\">(2,5,3,2)</span> are not.</p><p>Bear Limak has a sequence of positive integers <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">1</sub>,<i>t</i><sub class=\"lower-index\">2</sub>,...,<i>t</i><sub class=\"lower-index\"><i>n</i></sub></span>. This sequence <span class=\"tex-font-style-bf\">is not nice</span> now and Limak wants to fix it by a single swap. He is going to choose two indices <span class=\"tex-span\"><i>i</i>&lt;<i>j</i></span> and swap elements <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>j</i></sub></span> in order to get a nice sequence. Count the number of ways to do so. Two ways are considered different if indices of elements chosen for a swap are different.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">2&le;<i>n</i>&le;150000</span>)&minus; the length of the sequence.</p><p>The second line contains <span class=\"tex-span\"><i>n</i></span> integers <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">1</sub>,<i>t</i><sub class=\"lower-index\">2</sub>,...,<i>t</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">1&le;<i>t</i><sub class=\"lower-index\"><i>i</i></sub>&le;150000</span>) &minus; the initial sequence. It's guaranteed that the given sequence is not nice.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the number of ways to swap two elements exactly once in order to get a nice sequence.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>5<br/>2 8 4 7 7<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>4<br/>200 150 100 50<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>10<br/>3 2 1 4 1 4 1 4 1 4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>8<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>9<br/>1 2 3 4 5 6 7 8 9<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>0<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample, there are two ways to get a nice sequence with one swap: </p><ol> <li> Swap <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">2</sub>=8</span> with <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">4</sub>=7</span>. </li><li> Swap <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">1</sub>=2</span> with <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">5</sub>=7</span>. </li></ol><p>In the second sample, there is only one way&minus; Limak should swap <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">1</sub>=200</span> with <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\">4</sub>=50</span>.</p></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}