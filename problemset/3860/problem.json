{"title": "Points", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">D. Points</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Pete and Bob invented a new interesting game. Bob takes a sheet of paper and locates a Cartesian coordinate system on it as follows: point <span class=\"tex-span\">(0,0)</span> is located in the bottom-left corner, <span class=\"tex-span\"><i>Ox</i></span> axis is directed right, <span class=\"tex-span\"><i>Oy</i></span> axis is directed up. Pete gives Bob requests of three types: </p><ul> <li> <span class=\"tex-font-style-tt\">add x y</span> &minus; on the sheet of paper Bob marks a point with coordinates <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span>. For each request of this type it's guaranteed that point <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span> is not yet marked on Bob's sheet at the time of the request. </li><li> <span class=\"tex-font-style-tt\">remove x y</span> &minus; on the sheet of paper Bob erases the previously marked point with coordinates <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span>. For each request of this type it's guaranteed that point <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span> is already marked on Bob's sheet at the time of the request. </li><li> <span class=\"tex-font-style-tt\">find x y</span> &minus; on the sheet of paper Bob finds all the marked points, lying strictly above and strictly to the right of point <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span>. Among these points Bob chooses the leftmost one, if it is not unique, he chooses the bottommost one, and gives its coordinates to Pete. </li></ul><p>Bob managed to answer the requests, when they were 10, 100 or 1000, but when their amount grew up to <span class=\"tex-span\">2&middot;10<sup class=\"upper-index\">5</sup></span>, Bob failed to cope. Now he needs a program that will answer all Pete's requests. Help Bob, please!</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first input line contains number <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;2&middot;10<sup class=\"upper-index\">5</sup></span>) &minus; amount of requests. Then there follow <span class=\"tex-span\"><i>n</i></span> lines &minus; descriptions of the requests. <span class=\"tex-font-style-tt\">add x y</span> describes the request to add a point, <span class=\"tex-font-style-tt\">remove x y</span> &minus; the request to erase a point, <span class=\"tex-font-style-tt\">find x y</span> &minus; the request to find the bottom-left point. All the coordinates in the input file are non-negative and don't exceed <span class=\"tex-span\">10<sup class=\"upper-index\">9</sup></span>.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each request of type <span class=\"tex-font-style-tt\">find x y</span> output in a separate line the answer to it &minus; coordinates of the bottommost among the leftmost marked points, lying strictly above and to the right of point <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span>. If there are no points strictly above and to the right of point <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span>, output <span class=\"tex-font-style-tt\">-1</span>.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>7<br/>add 1 1<br/>add 3 4<br/>find 0 0<br/>remove 1 1<br/>find 0 0<br/>add 1 1<br/>find 0 0<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1 1<br/>3 4<br/>1 1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>13<br/>add 5 5<br/>add 5 6<br/>add 5 7<br/>add 6 5<br/>add 6 6<br/>add 6 7<br/>add 7 5<br/>add 7 6<br/>add 7 7<br/>find 6 6<br/>remove 7 7<br/>find 6 6<br/>find 4 4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>7 7<br/>-1<br/>5 5<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}