{"title": "Army Creation", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Army Creation</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>As you might remember from our previous rounds, Vova really likes computer games. Now he is playing a strategy game known as Rage of Empires.</p><p>In the game Vova can hire <span class=\"tex-span\"><i>n</i></span> different warriors; <span class=\"tex-span\"><i>i</i></span>th warrior has the type <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>. Vova wants to create a <span class=\"tex-font-style-it\">balanced</span> army hiring some subset of warriors. An army is called <span class=\"tex-font-style-it\">balanced</span> if for each type of warrior present in the game there are not more than <span class=\"tex-span\"><i>k</i></span> warriors of this type in the army. Of course, Vova wants his army to be as large as possible.</p><p>To make things more complicated, Vova has to consider <span class=\"tex-span\"><i>q</i></span> different plans of creating his army. <span class=\"tex-span\"><i>i</i></span>th plan allows him to hire only warriors whose numbers are not less than <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span> and not greater than <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span>.</p><p>Help Vova to determine the largest size of a <span class=\"tex-font-style-it\">balanced</span> army for each plan.</p><p><span class=\"tex-font-style-bf\">Be aware that the plans are given in a modified way. See input section for details.</span></p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1&le;<i>n</i>,<i>k</i>&le;100000</span>).</p><p>The second line contains <span class=\"tex-span\"><i>n</i></span> integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub></span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">2</sub></span>, ... <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">1&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>&le;100000</span>).</p><p>The third line contains one integer <span class=\"tex-span\"><i>q</i></span> (<span class=\"tex-span\">1&le;<i>q</i>&le;100000</span>).</p><p>Then <span class=\"tex-span\"><i>q</i></span> lines follow. <span class=\"tex-span\"><i>i</i></span>th line contains two numbers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span> which represent <span class=\"tex-span\"><i>i</i></span>th plan (<span class=\"tex-span\">1&le;<i>x</i><sub class=\"lower-index\"><i>i</i></sub>,<i>y</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>).</p><p>You have to keep track of the answer to the last plan (let's call it <span class=\"tex-span\"><i>last</i></span>). In the beginning <span class=\"tex-span\"><i>last</i>=0</span>. Then to restore values of <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> for the <span class=\"tex-span\"><i>i</i></span>th plan, you have to do the following:</p><ol> <li> <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub>=((<i>x</i><sub class=\"lower-index\"><i>i</i></sub>+<i>last</i>)<i>mod</i><i>n</i>)+1</span>; </li><li> <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub>=((<i>y</i><sub class=\"lower-index\"><i>i</i></sub>+<i>last</i>)<i>mod</i><i>n</i>)+1</span>; </li><li> If <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub>&gt;<i>r</i><sub class=\"lower-index\"><i>i</i></sub></span>, swap <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span>. </li></ol></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print <span class=\"tex-span\"><i>q</i></span> numbers. <span class=\"tex-span\"><i>i</i></span>th number must be equal to the maximum size of a <span class=\"tex-font-style-it\">balanced</span> army when considering <span class=\"tex-span\"><i>i</i></span>th plan.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Example</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>6 2<br/>1 1 1 2 2 2<br/>5<br/>1 6<br/>4 3<br/>1 1<br/>2 6<br/>2 6<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/>4<br/>1<br/>3<br/>2<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first example the real plans are: </p><ol> <li> <span class=\"tex-span\">12</span> </li><li> <span class=\"tex-span\">16</span> </li><li> <span class=\"tex-span\">66</span> </li><li> <span class=\"tex-span\">24</span> </li><li> <span class=\"tex-span\">46</span> </li></ol></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}