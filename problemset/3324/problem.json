{"title": "Jeff and Permutation", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Jeff and Permutation</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\">1</sub>,<i>p</i><sub class=\"lower-index\">2</sub>,...,<i>p</i><sub class=\"lower-index\"><i>n</i></sub></span> for his birthday.</p><p>Jeff hates inversions in sequences. An inversion in sequence <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,<i>a</i><sub class=\"lower-index\">2</sub>,...,<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> is a pair of indexes <span class=\"tex-span\"><i>i</i>,<i>j</i></span> <span class=\"tex-span\">(1&le;<i>i</i>&lt;<i>j</i>&le;<i>n</i>)</span>, such that an inequality <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub>&gt;<i>a</i><sub class=\"lower-index\"><i>j</i></sub></span> holds.</p><p>Jeff can multiply some numbers of the sequence <span class=\"tex-span\"><i>p</i></span> by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains integer <span class=\"tex-span\"><i>n</i></span> <span class=\"tex-span\">(1&le;<i>n</i>&le;2000)</span>. The next line contains <span class=\"tex-span\"><i>n</i></span> integers &minus; sequence <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\">1</sub></span>, <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\">2</sub></span>, <span class=\"tex-span\">...</span>, <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>n</i></sub></span> <span class=\"tex-span\">(|<i>p</i><sub class=\"lower-index\"><i>i</i></sub>|&le;10<sup class=\"upper-index\">5</sup>)</span>. The numbers are separated by spaces.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In a single line print the answer to the problem &minus; the minimum number of inversions Jeff can get.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>2<br/>2 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>0<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>9<br/>-2 0 -1 0 -1 2 1 0 -1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>6<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}