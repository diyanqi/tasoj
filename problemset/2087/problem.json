{"title": "TOF", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. TOF</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Today Pari gave Arya a cool graph problem. Arya wrote a non-optimal solution for it, because he believes in his ability to optimize non-optimal solutions. In addition to being non-optimal, his code was buggy and he tried a lot to optimize it, so the code also became dirty! He keeps getting Time Limit Exceeds and he is disappointed. Suddenly a bright idea came to his mind!</p><p>Here is how his dirty code looks like:</p><pre><br/>dfs(v)<br/>{<br/>     set count[v] = count[v] + 1<br/>     if(count[v] &lt; 1000)<br/>     {<br/>          foreach u in neighbors[v]<br/>          {<br/>               if(visited[u] is equal to false)<br/>               {<br/>                    dfs(u)<br/>               }<br/>               break<br/>          }<br/>     }<br/>     set visited[v] = true<br/>}<br/><br/>main()<br/>{<br/>     input the digraph()<br/>     TOF()<br/>     foreach 1&lt;=i&lt;=n<br/>     {<br/>          set count[i] = 0 , visited[i] = false<br/>     }<br/>     foreach 1 &lt;= v &lt;= n<br/>     {<br/>          if(visited[v] is equal to false)<br/>          {<br/>               dfs(v)<br/>          }<br/>     }<br/>     ... // And do something cool and magical but we can't tell you what!<br/>}<br/></pre><p>He asks you to write the <span class=\"tex-font-style-it\">TOF</span> function in order to optimize the running time of the code with minimizing the number of calls of the <span class=\"tex-font-style-it\">dfs</span> function. The input is a directed graph and in the <span class=\"tex-font-style-it\">TOF</span> function you have to rearrange the edges of the graph in the list <span class=\"tex-font-style-it\">neighbors</span> for each vertex. The number of calls of <span class=\"tex-font-style-it\">dfs</span> function depends on the arrangement of <span class=\"tex-font-style-it\">neighbors</span> of each vertex.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1&le;<i>n</i>,<i>m</i>&le;5000</span>)&minus; the number of vertices and then number of directed edges in the input graph.</p><p>Each of the next <span class=\"tex-span\"><i>m</i></span> lines contains a pair of integers <span class=\"tex-span\"><i>u</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>u</i><sub class=\"lower-index\"><i>i</i></sub>,<i>v</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>), meaning there is a directed <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/5105f7fc625298f3984873d3294cfbb9cfa4efe835.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> edge in the input graph. </p><p>You may assume that the graph won't contain any self-loops and there is at most one edge between any unordered pair of vertices.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer&minus; the minimum possible number of <span class=\"tex-font-style-it\">dfs</span> calls that can be achieved with permuting the edges.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>3 3<br/>1 2<br/>2 3<br/>3 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2998<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>6 7<br/>1 2<br/>2 3<br/>3 1<br/>3 4<br/>4 5<br/>5 6<br/>6 4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3001<br/></pre></div></div></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}