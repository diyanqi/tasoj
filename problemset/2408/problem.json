{"title": "Shortest Path", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Shortest Path</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>3 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>In Ancient Berland there were <span class=\"tex-span\"><i>n</i></span> cities and <span class=\"tex-span\"><i>m</i></span> two-way roads of equal length. The cities are numbered with integers from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span> inclusively. According to an ancient superstition, if a traveller visits three cities <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> in row, without visiting other cities between them, a great disaster awaits him. Overall there are <span class=\"tex-span\"><i>k</i></span> such city triplets. Each triplet is ordered, which means that, for example, you are allowed to visit the cities in the following order: <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>. Vasya wants to get from the city <span class=\"tex-span\">1</span> to the city <span class=\"tex-span\"><i>n</i></span> and not fulfil the superstition. Find out which minimal number of roads he should take. Also you are required to find one of his possible path routes.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains three integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>m</i></span>, <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">2&le;<i>n</i>&le;3000,1&le;<i>m</i>&le;20000,0&le;<i>k</i>&le;10<sup class=\"upper-index\">5</sup></span>) which are the number of cities, the number of roads and the number of the forbidden triplets correspondingly. </p><p>Then follow <span class=\"tex-span\"><i>m</i></span> lines each containing two integers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>x</i><sub class=\"lower-index\"><i>i</i></sub>,<i>y</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>) which are the road descriptions. The road is described by the numbers of the cities it joins. No road joins a city with itself, there cannot be more than one road between a pair of cities. </p><p>Then follow <span class=\"tex-span\"><i>k</i></span> lines each containing three integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>,<i>b</i><sub class=\"lower-index\"><i>i</i></sub>,<i>c</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>) which are the forbidden triplets. Each ordered triplet is listed mo more than one time. All three cities in each triplet are distinct.</p><p>City <span class=\"tex-span\"><i>n</i></span> can be unreachable from city <span class=\"tex-span\">1</span> by roads.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>If there are no path from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span> print <span class=\"tex-font-style-tt\">-1</span>. Otherwise on the first line print the number of roads <span class=\"tex-span\"><i>d</i></span> along the shortest path from the city <span class=\"tex-span\">1</span> to the city <span class=\"tex-span\"><i>n</i></span>. On the second line print <span class=\"tex-span\"><i>d</i>+1</span> numbers &minus; any of the possible shortest paths for Vasya. The path should start in the city <span class=\"tex-span\">1</span> and end in the city <span class=\"tex-span\"><i>n</i></span>.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>4 4 1<br/>1 2<br/>2 3<br/>3 4<br/>1 3<br/>1 4 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/>1 3 4<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3 1 0<br/>1 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>-1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>4 4 2<br/>1 2<br/>2 3<br/>3 4<br/>1 3<br/>1 2 3<br/>1 3 4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/>1 3 2 3 4<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 3000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}