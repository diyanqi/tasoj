{"title": "Order Book", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B. Order Book</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>In this task you need to process a set of stock exchange orders and use them to create <span class=\"tex-font-style-it\">order book</span>.</p><p>An <span class=\"tex-font-style-it\">order</span> is an instruction of some participant to buy or sell stocks on stock exchange. The order number <span class=\"tex-span\"><i>i</i></span> has price <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i></sub></span>, direction <span class=\"tex-span\"><i>d</i><sub class=\"lower-index\"><i>i</i></sub></span> &minus; buy or sell, and integer <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>i</i></sub></span>. This means that the participant is ready to buy or sell <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>i</i></sub></span> stocks at price <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i></sub></span> for one stock. A value <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>i</i></sub></span> is also known as a <span class=\"tex-font-style-it\">volume</span> of an order.</p><p>All orders with the same price <span class=\"tex-span\"><i>p</i></span> and direction <span class=\"tex-span\"><i>d</i></span> are merged into one <span class=\"tex-font-style-it\">aggregated</span> order with price <span class=\"tex-span\"><i>p</i></span> and direction <span class=\"tex-span\"><i>d</i></span>. The volume of such order is a sum of volumes of the initial orders.</p><p>An order book is a list of aggregated orders, the first part of which contains sell orders sorted by price in descending order, the second contains buy orders also sorted by price in descending order.</p><p>An order book of depth <span class=\"tex-span\"><i>s</i></span> contains <span class=\"tex-span\"><i>s</i></span> best aggregated orders for each direction. A buy order is better if it has higher price and a sell order is better if it has lower price. If there are less than <span class=\"tex-span\"><i>s</i></span> aggregated orders for some direction then all of them will be in the final order book.</p><p>You are given <span class=\"tex-span\"><i>n</i></span> stock exhange orders. Your task is to print order book of depth <span class=\"tex-span\"><i>s</i></span> for these orders.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The input starts with two positive integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>s</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;1000,1&le;<i>s</i>&le;50</span>), the number of orders and the book depth.</p><p>Next <span class=\"tex-span\"><i>n</i></span> lines contains a letter <span class=\"tex-span\"><i>d</i><sub class=\"lower-index\"><i>i</i></sub></span> (either '<span class=\"tex-font-style-tt\">B</span>' or '<span class=\"tex-font-style-tt\">S</span>'), an integer <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">0&le;<i>p</i><sub class=\"lower-index\"><i>i</i></sub>&le;10<sup class=\"upper-index\">5</sup></span>) and an integer <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>q</i><sub class=\"lower-index\"><i>i</i></sub>&le;10<sup class=\"upper-index\">4</sup></span>) &minus; direction, price and volume respectively. The letter '<span class=\"tex-font-style-tt\">B</span>' means buy, '<span class=\"tex-font-style-tt\">S</span>' means sell. The price of any sell order is higher than the price of any buy order.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print no more than <span class=\"tex-span\">2<i>s</i></span> lines with aggregated orders from order book of depth <span class=\"tex-span\"><i>s</i></span>. The output format for orders should be the same as in input.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>6 2<br/>B 10 3<br/>S 50 2<br/>S 40 1<br/>S 50 6<br/>B 20 4<br/>B 25 10<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>S 50 8<br/>S 40 1<br/>B 25 10<br/>B 20 4<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>Denote <span class=\"tex-font-style-it\">(x, y)</span> an order with price <span class=\"tex-span\"><i>x</i></span> and volume <span class=\"tex-span\"><i>y</i></span>. There are 3 aggregated buy orders (10, 3), (20, 4), (25, 10) and two sell orders (50, 8), (40, 1) in the sample.</p><p>You need to print no more than two best orders for each direction, so you shouldn't print the order (10 3) having the worst price among buy orders.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}