{"title": "Recover Polygon (medium)", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B2. Recover Polygon (medium)</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>4 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Now that Heidi has made sure her Zombie Contamination level checker works, it's time to strike! This time, the zombie lair is a strictly convex polygon on the lattice. Each vertex of the polygon occupies a point on the lattice. For each cell of the lattice, Heidi knows the level of Zombie Contamination &mdash; the number of corners of the cell that are inside or on the border of the lair.</p><p>Given this information, Heidi wants to know the exact shape of the lair to rain destruction on the zombies. Help her!</p><p><img class=\"tex-graphics\" height=\"378px\" src=\"http://cf.hustoj.com:80/userfiles/image/bd5acd6ed224af3b2c78870d33dcab61cc4cfa323838.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"378px\"/></p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The input contains multiple test cases.</p><p>The first line of each test case contains one integer <span class=\"tex-span\"><i>N</i></span>, the size of the lattice grid (<span class=\"tex-span\">5&le;<i>N</i>&le;500</span>). The next <span class=\"tex-span\"><i>N</i></span> lines each contain <span class=\"tex-span\"><i>N</i></span> characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4. </p><p>Cells are given in the same order as they are shown in the picture above: rows go in the decreasing value of <span class=\"tex-span\"><i>y</i></span> coordinate, and in one row cells go in the order of increasing <span class=\"tex-span\"><i>x</i></span> coordinate. This means that the first row corresponds to cells with coordinates <span class=\"tex-span\">(1,<i>N</i>),...,(<i>N</i>,<i>N</i>)</span> and the last row corresponds to cells with coordinates <span class=\"tex-span\">(1,1),...,(<i>N</i>,1)</span>.</p><p>The last line of the file contains a zero. This line should not be treated as a test case. The sum of the <span class=\"tex-span\"><i>N</i></span> values for all tests in one file will not exceed <span class=\"tex-span\">5000</span>.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, give the following output:</p><p>The first line of the output should contain one integer <span class=\"tex-span\"><i>V</i></span>, the number of vertices of the polygon that is the secret lair. The next <span class=\"tex-span\"><i>V</i></span> lines each should contain two integers, denoting the vertices of the polygon in the clockwise order, starting from the lexicographically smallest vertex.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>8<br/>00000000<br/>00000110<br/>00012210<br/>01234200<br/>02444200<br/>01223200<br/>00001100<br/>00000000<br/>5<br/>00000<br/>01210<br/>02420<br/>01210<br/>00000<br/>7<br/>0000000<br/>0122100<br/>0134200<br/>0013200<br/>0002200<br/>0001100<br/>0000000<br/>0<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/>2 3<br/>2 4<br/>6 6<br/>5 2<br/>4<br/>2 2<br/>2 3<br/>3 3<br/>3 2<br/>3<br/>2 5<br/>4 5<br/>4 2<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>It is guaranteed that the solution always exists and is unique. It is guaranteed that in the correct solution the coordinates of the polygon vertices are between <span class=\"tex-span\">2</span> and <span class=\"tex-span\"><i>N</i>-2</span>. A vertex <span class=\"tex-span\">(<i>x</i><sub class=\"lower-index\">1</sub>,<i>y</i><sub class=\"lower-index\">1</sub>)</span> is lexicographically smaller than vertex <span class=\"tex-span\">(<i>x</i><sub class=\"lower-index\">2</sub>,<i>y</i><sub class=\"lower-index\">2</sub>)</span> if <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\">1</sub>&lt;<i>x</i><sub class=\"lower-index\">2</sub></span> or <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/26ba8ca26ddb03d7a81c3be2e48bf069ea52c6df383838.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 4000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}