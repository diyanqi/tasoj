{"title": "Presents in Bankopolis", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">D. Presents in Bankopolis</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Bankopolis is an incredible city in which all the <span class=\"tex-span\"><i>n</i></span> crossroads are located on a straight line and numbered from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span> along it. On each crossroad there is a bank office.</p><p>The crossroads are connected with <span class=\"tex-span\"><i>m</i></span> oriented bicycle lanes (the <span class=\"tex-span\"><i>i</i></span>-th lane goes from crossroad <span class=\"tex-span\"><i>u</i><sub class=\"lower-index\"><i>i</i></sub></span> to crossroad <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span>), the difficulty of each of the lanes is known.</p><p>Oleg the bank client wants to gift happiness and joy to the bank employees. He wants to visit exactly <span class=\"tex-span\"><i>k</i></span> offices, in each of them he wants to gift presents to the employees.</p><p>The problem is that Oleg don't want to see the reaction on his gifts, so he can't use a bicycle lane which passes near the office in which he has already presented his gifts (formally, the <span class=\"tex-span\"><i>i</i></span>-th lane passes near the office on the <span class=\"tex-span\"><i>x</i></span>-th crossroad if and only if <span class=\"tex-span\"><i>min</i>(<i>u</i><sub class=\"lower-index\"><i>i</i></sub>,<i>v</i><sub class=\"lower-index\"><i>i</i></sub>)&lt;<i>x</i>&lt;<i>max</i>(<i>u</i><sub class=\"lower-index\"><i>i</i></sub>,<i>v</i><sub class=\"lower-index\"><i>i</i></sub>)))</span>. Of course, in each of the offices Oleg can present gifts exactly once. Oleg is going to use exactly <span class=\"tex-span\"><i>k</i>-1</span> bicycle lane to move between offices. Oleg can start his path from any office and finish it in any office.</p><p>Oleg wants to choose such a path among possible ones that the total difficulty of the lanes he will use is minimum possible. Find this minimum possible total difficulty.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1&le;<i>n</i>,<i>k</i>&le;80</span>)&minus; the number of crossroads (and offices) and the number of offices Oleg wants to visit.</p><p>The second line contains single integer <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">0&le;<i>m</i>&le;2000</span>)&minus; the number of bicycle lanes in Bankopolis.</p><p>The next <span class=\"tex-span\"><i>m</i></span> lines contain information about the lanes.</p><p>The <span class=\"tex-span\"><i>i</i></span>-th of these lines contains three integers <span class=\"tex-span\"><i>u</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>u</i><sub class=\"lower-index\"><i>i</i></sub>,<i>v</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>, <span class=\"tex-span\">1&le;<i>c</i><sub class=\"lower-index\"><i>i</i></sub>&le;1000</span>), denoting the crossroads connected by the <span class=\"tex-span\"><i>i</i></span>-th road and its difficulty.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the only line print the minimum possible total difficulty of the lanes in a valid path, or <span class=\"tex-font-style-tt\">-1</span> if there are no valid paths.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>7 4<br/>4<br/>1 6 2<br/>6 2 2<br/>2 4 2<br/>2 7 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>6<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>4 3<br/>4<br/>2 1 2<br/>1 3 2<br/>3 4 2<br/>4 1 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first example Oleg visiting banks by path <span class=\"tex-span\">1&rarr;6&rarr;2&rarr;4</span>.</p><p>Path <span class=\"tex-span\">1&rarr;6&rarr;2&rarr;7</span> with smaller difficulity is incorrect because crossroad <span class=\"tex-span\">2&rarr;7</span> passes near already visited office on the crossroad <span class=\"tex-span\">6</span>.</p><p>In the second example Oleg can visit banks by path <span class=\"tex-span\">4&rarr;1&rarr;3</span>.</p></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}