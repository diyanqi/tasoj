{"title": "Equidistant String", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B. Equidistant String</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Little Susie loves strings. Today she calculates distances between them. As Susie is a small girl after all, her strings contain only digits zero and one. She uses the definition of Hamming distance:</p><p>We will define the distance between two strings <span class=\"tex-span\"><i>s</i></span> and <span class=\"tex-span\"><i>t</i></span> of the same length consisting of digits zero and one as the number of positions <span class=\"tex-span\"><i>i</i></span>, such that <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> isn't equal to <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span>. </p><p>As besides everything else Susie loves symmetry, she wants to find for two strings <span class=\"tex-span\"><i>s</i></span> and <span class=\"tex-span\"><i>t</i></span> of length <span class=\"tex-span\"><i>n</i></span> such string <span class=\"tex-span\"><i>p</i></span> of length <span class=\"tex-span\"><i>n</i></span>, that the distance from <span class=\"tex-span\"><i>p</i></span> to <span class=\"tex-span\"><i>s</i></span> was equal to the distance from <span class=\"tex-span\"><i>p</i></span> to <span class=\"tex-span\"><i>t</i></span>.</p><p>It's time for Susie to go to bed, help her find such string <span class=\"tex-span\"><i>p</i></span> or state that it is impossible.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains string <span class=\"tex-span\"><i>s</i></span> of length <span class=\"tex-span\"><i>n</i></span>. </p><p>The second line contains string <span class=\"tex-span\"><i>t</i></span> of length <span class=\"tex-span\"><i>n</i></span>.</p><p>The length of string <span class=\"tex-span\"><i>n</i></span> is within range from <span class=\"tex-span\">1</span> to <span class=\"tex-span\">10<sup class=\"upper-index\">5</sup></span>. It is guaranteed that both strings contain only digits zero and one.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a string of length <span class=\"tex-span\"><i>n</i></span>, consisting of digits zero and one, that meets the problem statement. If no such string exist, print on a single line \"impossible\" (without the quotes).</p><p>If there are multiple possible answers, print any of them.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>0001<br/>1011<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>0011<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>000<br/>111<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>impossible<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample different answers are possible, namely &minus; 0010, 0011, 0110, 0111, 1000, 1001, 1100, 1101.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}