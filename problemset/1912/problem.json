{"title": "Expression Queries", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">L. Expression Queries</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>4 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>512 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>A <span class=\"tex-font-style-it\">simplified arithmetic expression</span> (SAE) is an arithmetic expression defined by the following grammar:</p><ul> <li> <span class=\"tex-font-style-tt\">&lt;SAE&gt; ::= &lt;Number&gt; | &lt;SAE&gt;+&lt;SAE&gt; | &lt;SAE&gt;*&lt;SAE&gt; | (&lt;SAE&gt;)</span> </li><li> <span class=\"tex-font-style-tt\">&lt;Number&gt; ::= &lt;Digit&gt; | &lt;Digit&gt;&lt;Number&gt;</span> </li><li> <span class=\"tex-font-style-tt\">&lt;Digit&gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</span> </li></ul><p>In other words it's a correct arithmetic expression that is allowed to contain brackets, numbers (possibly with leading zeros), multiplications and additions. For example expressions \"<span class=\"tex-font-style-tt\">(0+01)</span>\", \"<span class=\"tex-font-style-tt\">0</span>\" and \"<span class=\"tex-font-style-tt\">1*(0)</span>\" are simplified arithmetic expressions, but expressions \"<span class=\"tex-font-style-tt\">2-1</span>\", \"<span class=\"tex-font-style-tt\">+1</span>\" and \"<span class=\"tex-font-style-tt\">1+2)</span>\" are not.</p><p>Given a string <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\">1</sub><i>s</i><sub class=\"lower-index\">2</sub>...<i>s</i><sub class=\"lower-index\">|<i>s</i>|</sub></span> that represents a SAE; <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> denotes the <span class=\"tex-span\"><i>i</i></span>-th character of the string which can be either a digit ('<span class=\"tex-font-style-tt\">0</span>'-'<span class=\"tex-font-style-tt\">9</span>'), a plus sign ('<span class=\"tex-font-style-tt\">+</span>'), a multiplication sign ('<span class=\"tex-font-style-tt\">*</span>'), an opening round bracket '<span class=\"tex-font-style-tt\">(</span>' or a closing round bracket '<span class=\"tex-font-style-tt\">)</span>'.</p><p>A part <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>l</i></sub><i>s</i><sub class=\"lower-index\"><i>l</i>+1</sub>...<i>s</i><sub class=\"lower-index\"><i>r</i></sub></span> of this string is called a <span class=\"tex-font-style-it\">sub-expression</span> if and only if it is a SAE.</p><p>You task is to answer <span class=\"tex-span\"><i>m</i></span> queries, each of which is a pair of integers <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> <span class=\"tex-span\">(1&le;<i>l</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>r</i><sub class=\"lower-index\"><i>i</i></sub>&le;|<i>s</i>|)</span>. For each query determine whether the corresponding part of the given string is a sub-expression and in case it's a sub-expression calculate its value modulo <span class=\"tex-span\">1000000007(10<sup class=\"upper-index\">9</sup>+7)</span>. The values should be calculated using standard operator priorities.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains non-empty string <span class=\"tex-span\"><i>s</i></span> <span class=\"tex-span\">(1&le;|<i>s</i>|&le;4&middot;10<sup class=\"upper-index\">5</sup>)</span> which represents a correct SAE. Each character of the string can be one of the following characters: '<span class=\"tex-font-style-tt\">*</span>', '<span class=\"tex-font-style-tt\">+</span>', '<span class=\"tex-font-style-tt\">(</span>', '<span class=\"tex-font-style-tt\">)</span>' or a digit ('<span class=\"tex-font-style-tt\">0</span>'-'<span class=\"tex-font-style-tt\">9</span>'). The expression might contain extra-huge numbers.</p><p>The second line contains an integer <span class=\"tex-span\"><i>m</i></span> <span class=\"tex-span\">(1&le;<i>m</i>&le;4&middot;10<sup class=\"upper-index\">5</sup>)</span> which is the number of queries. Each of the next <span class=\"tex-span\"><i>m</i></span> lines contains two space-separated integers <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> <span class=\"tex-span\">(1&le;<i>l</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>r</i><sub class=\"lower-index\"><i>i</i></sub>&le;|<i>s</i>|)</span> &minus; the <span class=\"tex-span\"><i>i</i></span>-th query.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>The <span class=\"tex-span\"><i>i</i></span>-th number of output should be the answer for the <span class=\"tex-span\"><i>i</i></span>-th query. If the <span class=\"tex-span\"><i>i</i></span>-th query corresponds to a valid sub-expression output the value of the sub-expression modulo <span class=\"tex-span\">1000000007(10<sup class=\"upper-index\">9</sup>+7)</span>. Otherwise output -1 as an answer for the query. Print numbers on separate lines.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>((1+2)*3+101*2)<br/>6<br/>8 14<br/>1 6<br/>2 10<br/>11 14<br/>5 5<br/>4 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>205<br/>-1<br/>10<br/>2<br/>2<br/>-1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>(01)<br/>1<br/>1 4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 4000, "memory_limit": 512, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}