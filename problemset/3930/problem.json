{"title": "Hierarchy", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B. Hierarchy</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>64 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Nick's company employed <span class=\"tex-span\"><i>n</i></span> people. Now Nick needs to build a tree hierarchy of &laquo;supervisor-surbodinate&raquo; relations in the company (this is to say that each employee, except one, has exactly one supervisor). There are <span class=\"tex-span\"><i>m</i></span> applications written in the following form: <span class=\"tex-font-style-it\">&laquo;employee <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> is ready to become a supervisor of employee <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> at extra cost <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span>&raquo;</span>. The qualification <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>j</i></sub></span> of each employee is known, and for each application the following is true: <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></sub>&gt;<i>q</i><sub class=\"lower-index\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></sub></span>. </p><p>Would you help Nick calculate the minimum cost of such a hierarchy, or find out that it is impossible to build it.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first input line contains integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;1000</span>) &minus; amount of employees in the company. The following line contains <span class=\"tex-span\"><i>n</i></span> space-separated numbers <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>j</i></sub></span> (<span class=\"tex-span\">0&le;<i>q</i><sub class=\"lower-index\"><i>j</i></sub>&le;10<sup class=\"upper-index\">6</sup></span>)&minus; the employees' qualifications. The following line contains number <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">0&le;<i>m</i>&le;10000</span>) &minus; amount of received applications. The following <span class=\"tex-span\"><i>m</i></span> lines contain the applications themselves, each of them in the form of three space-separated numbers: <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>,<i>b</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>, <span class=\"tex-span\">0&le;<i>c</i><sub class=\"lower-index\"><i>i</i></sub>&le;10<sup class=\"upper-index\">6</sup></span>). Different applications can be similar, i.e. they can come from one and the same employee who offered to become a supervisor of the same person but at a different cost. For each application <span class=\"tex-span\"><i>q</i><sub class=\"lower-index\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></sub>&gt;<i>q</i><sub class=\"lower-index\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></sub></span>.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output the only line &minus; the minimum cost of building such a hierarchy, or <span class=\"tex-font-style-tt\">-1</span> if it is impossible to build it.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>4<br/>7 2 3 1<br/>4<br/>1 2 5<br/>2 4 1<br/>3 4 1<br/>1 3 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>11<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3<br/>1 2 3<br/>2<br/>3 1 2<br/>3 1 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>-1<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample one of the possible ways for building a hierarchy is to take applications with indexes 1, 2 and 4, which give 11 as the minimum total cost. In the second sample it is impossible to build the required hierarchy, so the answer is <span class=\"tex-font-style-tt\">-1</span>.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 64, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}