{"title": "Sereja and Brackets", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Sereja and Brackets</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Sereja has a bracket sequence <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\">1</sub>,<i>s</i><sub class=\"lower-index\">2</sub>,...,<i>s</i><sub class=\"lower-index\"><i>n</i></sub></span>, or, in other words, a string <span class=\"tex-span\"><i>s</i></span> of length <span class=\"tex-span\"><i>n</i></span>, consisting of characters \"<span class=\"tex-font-style-tt\">(</span>\" and \"<span class=\"tex-font-style-tt\">)</span>\".</p><p>Sereja needs to answer <span class=\"tex-span\"><i>m</i></span> queries, each of them is described by two integers <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub>,<i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> <span class=\"tex-span\">(1&le;<i>l</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>r</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i>)</span>. The answer to the <span class=\"tex-span\"><i>i</i></span>-th query is the length of the maximum correct bracket subsequence of sequence <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></sub>,<i>s</i><sub class=\"lower-index\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub>+1</sub>,...,<i>s</i><sub class=\"lower-index\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></sub></span>. Help Sereja answer all queries.</p><p>You can find the definitions for a subsequence and a correct bracket sequence in the notes.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a sequence of characters <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\">1</sub>,<i>s</i><sub class=\"lower-index\">2</sub>,...,<i>s</i><sub class=\"lower-index\"><i>n</i></sub></span> <span class=\"tex-span\">(1&le;<i>n</i>&le;10<sup class=\"upper-index\">6</sup>)</span> without any spaces. Each character is either a \"<span class=\"tex-font-style-tt\">(</span>\" or a \"<span class=\"tex-font-style-tt\">)</span>\". The second line contains integer <span class=\"tex-span\"><i>m</i></span> <span class=\"tex-span\">(1&le;<i>m</i>&le;10<sup class=\"upper-index\">5</sup>)</span> &minus; the number of queries. Each of the next <span class=\"tex-span\"><i>m</i></span> lines contains a pair of integers. The <span class=\"tex-span\"><i>i</i></span>-th line contains integers <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub>,<i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> <span class=\"tex-span\">(1&le;<i>l</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>r</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i>)</span> &minus; the description of the <span class=\"tex-span\"><i>i</i></span>-th query.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the answer to each question on a single line. Print the answers in the order they go in the input.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>())(())(())(<br/>7<br/>1 1<br/>2 3<br/>1 2<br/>1 12<br/>8 12<br/>5 11<br/>2 10<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>0<br/>0<br/>2<br/>10<br/>4<br/>6<br/>6<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>A <span class=\"tex-font-style-it\">subsequence</span> of length <span class=\"tex-span\">|<i>x</i>|</span> of string <span class=\"tex-span\"><i>s</i>=<i>s</i><sub class=\"lower-index\">1</sub><i>s</i><sub class=\"lower-index\">2</sub>... <i>s</i><sub class=\"lower-index\">|<i>s</i>|</sub></span> (where <span class=\"tex-span\">|<i>s</i>|</span> is the length of string <span class=\"tex-span\"><i>s</i></span>) is string <span class=\"tex-span\"><i>x</i>=<i>s</i><sub class=\"lower-index\"><i>k</i><sub class=\"lower-index\">1</sub></sub><i>s</i><sub class=\"lower-index\"><i>k</i><sub class=\"lower-index\">2</sub></sub>... <i>s</i><sub class=\"lower-index\"><i>k</i><sub class=\"lower-index\">|<i>x</i>|</sub></sub></span> <span class=\"tex-span\">(1&le;<i>k</i><sub class=\"lower-index\">1</sub>&lt;<i>k</i><sub class=\"lower-index\">2</sub>&lt;...&lt;<i>k</i><sub class=\"lower-index\">|<i>x</i>|</sub>&le;|<i>s</i>|)</span>.</p><p>A <span class=\"tex-font-style-it\">correct bracket sequence</span> is a bracket sequence that can be transformed into a correct aryphmetic expression by inserting characters \"<span class=\"tex-font-style-tt\">1</span>\" and \"<span class=\"tex-font-style-tt\">+</span>\" between the characters of the string. For example, bracket sequences \"<span class=\"tex-font-style-tt\">()()</span>\", \"<span class=\"tex-font-style-tt\">(())</span>\" are correct (the resulting expressions \"<span class=\"tex-font-style-tt\">(1)+(1)</span>\", \"<span class=\"tex-font-style-tt\">((1+1)+1)</span>\"), and \"<span class=\"tex-font-style-tt\">)(</span>\" and \"<span class=\"tex-font-style-tt\">(</span>\" are not.</p><p>For the third query required sequence will be &laquo;<span class=\"tex-font-style-tt\">()</span>&raquo;.</p><p>For the fourth query required sequence will be &laquo;<span class=\"tex-font-style-tt\">()(())(())</span>&raquo;.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}