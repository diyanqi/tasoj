{"title": "Cinema Cashier", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B. Cinema Cashier</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>All cinema halls in Berland are rectangles with <span class=\"tex-span\"><i>K</i></span> rows of <span class=\"tex-span\"><i>K</i></span> seats each, and <span class=\"tex-span\"><i>K</i></span> is an odd number. Rows and seats are numbered from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>K</i></span>. For safety reasons people, who come to the box office to buy tickets, are not allowed to choose seats themselves. Formerly the choice was made by a cashier, but now this is the responsibility of a special seating program. It was found out that the large majority of Berland's inhabitants go to the cinema in order to watch a movie, that's why they want to sit as close to the hall center as possible. Moreover, a company of <span class=\"tex-span\"><i>M</i></span> people, who come to watch a movie, want necessarily to occupy <span class=\"tex-span\"><i>M</i></span> successive seats in one row. Let's formulate the algorithm, according to which the program chooses seats and sells tickets. As the request for <span class=\"tex-span\"><i>M</i></span> seats comes, the program should determine the row number <span class=\"tex-span\"><i>x</i></span> and the segment <span class=\"tex-span\">[<i>y</i><sub class=\"lower-index\"><i>l</i></sub>,<i>y</i><sub class=\"lower-index\"><i>r</i></sub>]</span> of the seats numbers in this row, where <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>r</i></sub>-<i>y</i><sub class=\"lower-index\"><i>l</i></sub>+1=<i>M</i></span>. From all such possible variants as a final result the program should choose the one with the minimum function value of total seats remoteness from the center. Say, <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/cf70b6f307370bb2076c554d0832dbfc4d0320b93939.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> &minus; the row and the seat numbers of the most \"central\" seat. Then the function value of seats remoteness from the hall center is <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/1d7a0714b07edb461c96bd98eb062c46b26911d33939.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>. If the amount of minimum function values is more than one, the program should choose the one that is closer to the screen (i.e. the row number <span class=\"tex-span\"><i>x</i></span> is lower). If the variants are still multiple, it should choose the one with the minimum <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>l</i></sub></span>. If you did not get yet, your task is to simulate the work of this program. </p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers <span class=\"tex-span\"><i>N</i></span> and <span class=\"tex-span\"><i>K</i></span> (<span class=\"tex-span\">1&le;<i>N</i>&le;1000,1&le;<i>K</i>&le;99</span>) &minus; the amount of requests and the hall size respectively. The second line contains <span class=\"tex-span\"><i>N</i></span> space-separated integers <span class=\"tex-span\"><i>M</i><sub class=\"lower-index\"><i>i</i></sub></span> from the range <span class=\"tex-span\">[1,<i>K</i>]</span> &minus; requests to the program.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output <span class=\"tex-span\"><i>N</i></span> lines. In the <span class=\"tex-span\"><i>i</i></span>-th line output &laquo;-1&raquo; (without quotes), if it is impossible to find <span class=\"tex-span\"><i>M</i><sub class=\"lower-index\"><i>i</i></sub></span> successive seats in one row, otherwise output three numbers <span class=\"tex-span\"><i>x</i>,<i>y</i><sub class=\"lower-index\"><i>l</i></sub>,<i>y</i><sub class=\"lower-index\"><i>r</i></sub></span>. Separate the numbers with a space.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>2 1<br/>1 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1 1 1<br/>-1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>4 3<br/>1 2 3 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2 2 2<br/>1 1 2<br/>3 1 3<br/>2 1 1<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}