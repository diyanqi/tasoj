{"title": "Zublicanes and Mumocrates", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">F. Zublicanes and Mumocrates</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>3 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>512 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>It's election time in Berland. The favorites are of course parties of zublicanes and mumocrates. The election campaigns of both parties include numerous demonstrations on <span class=\"tex-span\"><i>n</i></span> main squares of the capital of Berland. Each of the <span class=\"tex-span\"><i>n</i></span> squares certainly can have demonstrations of only one party, otherwise it could lead to riots. On the other hand, both parties have applied to host a huge number of demonstrations, so that on all squares demonstrations must be held. Now the capital management will distribute the area between the two parties.</p><p>Some pairs of squares are connected by <span class=\"tex-span\">(<i>n</i>-1)</span> bidirectional roads such that between any pair of squares there is a unique way to get from one square to another. Some squares are on the outskirts of the capital meaning that they are connected by a road with only one other square, such squares are called <span class=\"tex-font-style-it\">dead end</span> squares.</p><p>The mayor of the capital instructed to distribute all the squares between the parties so that the <span class=\"tex-font-style-it\">dead end</span> squares had the same number of demonstrations of the first and the second party. It is guaranteed that the number of dead end squares of the city is even.</p><p>To prevent possible conflicts between the zublicanes and the mumocrates it was decided to minimize the number of roads connecting the squares with the distinct parties. You, as a developer of the department of distributing squares, should determine this smallest number.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains a single integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">2&le;<i>n</i>&le;5000</span>) &minus; the number of squares in the capital of Berland.</p><p>Next <span class=\"tex-span\"><i>n</i>-1</span> lines contain the pairs of integers <span class=\"tex-span\"><i>x</i>,<i>y</i></span> (<span class=\"tex-span\">1&le;<i>x</i>,<i>y</i>&le;<i>n</i>,<i>x</i>&ne;<i>y</i></span>) &minus; the numbers of the squares connected by the road. All squares are numbered with integers from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>. It is guaranteed that the number of dead end squares of the city is even.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single number &minus; the minimum number of roads connecting the squares with demonstrations of different parties.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>8<br/>1 4<br/>2 4<br/>3 4<br/>6 5<br/>7 5<br/>8 5<br/>4 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>5<br/>1 2<br/>1 3<br/>1 4<br/>1 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 3000, "memory_limit": 512, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}