{"title": "Table Compression", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Table Compression</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>4 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Little Petya is now fond of data compression algorithms. He has already studied <span class=\"tex-font-style-it\">gz</span>, <span class=\"tex-font-style-it\">bz</span>, <span class=\"tex-font-style-it\">zip</span> algorithms and many others. Inspired by the new knowledge, Petya is now developing the new compression algorithm which he wants to name <span class=\"tex-font-style-it\">dis</span>.</p><p>Petya decided to compress tables. He is given a table <span class=\"tex-span\"><i>a</i></span> consisting of <span class=\"tex-span\"><i>n</i></span> rows and <span class=\"tex-span\"><i>m</i></span> columns that is filled with positive integers. He wants to build the table <span class=\"tex-span\"><i>a</i>'</span> consisting of positive integers such that the relative order of the elements in each row and each column remains the same. That is, if in some row <span class=\"tex-span\"><i>i</i></span> of the initial table <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>&lt;<i>a</i><sub class=\"lower-index\"><i>i</i>,<i>k</i></sub></span>, then in the resulting table <span class=\"tex-span\"><i>a</i>'<sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>&lt;<i>a</i>'<sub class=\"lower-index\"><i>i</i>,<i>k</i></sub></span>, and if <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>=<i>a</i><sub class=\"lower-index\"><i>i</i>,<i>k</i></sub></span> then <span class=\"tex-span\"><i>a</i>'<sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>=<i>a</i>'<sub class=\"lower-index\"><i>i</i>,<i>k</i></sub></span>. Similarly, if in some column <span class=\"tex-span\"><i>j</i></span> of the initial table <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>&lt;<i>a</i><sub class=\"lower-index\"><i>p</i>,<i>j</i></sub></span> then in compressed table <span class=\"tex-span\"><i>a</i>'<sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>&lt;<i>a</i>'<sub class=\"lower-index\"><i>p</i>,<i>j</i></sub></span> and if <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>=<i>a</i><sub class=\"lower-index\"><i>p</i>,<i>j</i></sub></span> then <span class=\"tex-span\"><i>a</i>'<sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>=<i>a</i>'<sub class=\"lower-index\"><i>p</i>,<i>j</i></sub></span>. </p><p>Because large values require more space to store them, the maximum value in <span class=\"tex-span\"><i>a</i>'</span> should be as small as possible.</p><p>Petya is good in theory, however, he needs your help to implement the algorithm.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/de6e1cfbb6ac269b466a5a11ec84e1ee5ecbf02432.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>, the number of rows and the number of columns of the table respectively.</p><p>Each of the following <span class=\"tex-span\"><i>n</i></span> rows contain <span class=\"tex-span\"><i>m</i></span> integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub></span> <span class=\"tex-span\">(1&le;<i>a</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>&le;10<sup class=\"upper-index\">9</sup>)</span> that are the values in the table.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output the compressed table in form of <span class=\"tex-span\"><i>n</i></span> lines each containing <span class=\"tex-span\"><i>m</i></span> integers.</p><p>If there exist several answers such that the maximum number in the compressed table is minimum possible, you are allowed to output any of them.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>2 2<br/>1 2<br/>3 4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1 2<br/>2 3<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>4 3<br/>20 10 30<br/>50 40 30<br/>50 60 70<br/>90 80 70<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2 1 3<br/>5 4 3<br/>5 6 7<br/>9 8 7<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample test, despite the fact <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1,2</sub>&ne;<i>a</i><sub class=\"lower-index\">21</sub></span>, they are not located in the same row or column so they may become equal after the compression.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 4000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}