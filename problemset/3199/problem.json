{"title": "George and Round", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B. George and Round</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>George decided to prepare a Codesecrof round, so he has prepared <span class=\"tex-span\"><i>m</i></span> problems for the round. Let's number the problems with integers <span class=\"tex-span\">1</span> through <span class=\"tex-span\"><i>m</i></span>. George estimates the <span class=\"tex-span\"><i>i</i></span>-th problem's complexity by integer <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>.</p><p>To make the round <span class=\"tex-font-style-it\">good</span>, he needs to put at least <span class=\"tex-span\"><i>n</i></span> problems there. Besides, he needs to have at least one problem with complexity exactly <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub></span>, at least one with complexity exactly <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">2</sub></span>, ..., and at least one with complexity exactly <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>n</i></sub></span>. Of course, the round can also have problems with other complexities.</p><p>George has a poor imagination. It's easier for him to make some already prepared problem simpler than to come up with a new one and prepare it. George is magnificent at simplifying problems. He can simplify any already prepared problem with complexity <span class=\"tex-span\"><i>c</i></span> to any positive integer complexity <span class=\"tex-span\"><i>d</i></span> (<span class=\"tex-span\"><i>c</i>&ge;<i>d</i></span>), by changing limits on the input data.</p><p>However, nothing is so simple. George understood that even if he simplifies some problems, he can run out of problems for a <span class=\"tex-font-style-it\">good</span> round. That's why he decided to find out the minimum number of problems he needs to come up with in addition to the <span class=\"tex-span\"><i>m</i></span> he's prepared in order to make a good round. Note that George can come up with a new problem of any complexity.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1&le;<i>n</i>,<i>m</i>&le;3000</span>) &minus; the minimal number of problems in a good round and the number of problems George's prepared. The second line contains space-separated integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,<i>a</i><sub class=\"lower-index\">2</sub>,...,<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">1&le;<i>a</i><sub class=\"lower-index\">1</sub>&lt;<i>a</i><sub class=\"lower-index\">2</sub>&lt;...&lt;<i>a</i><sub class=\"lower-index\"><i>n</i></sub>&le;10<sup class=\"upper-index\">6</sup></span>) &minus; the requirements for the complexity of the problems in a good round. The third line contains space-separated integers <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\">1</sub>,<i>b</i><sub class=\"lower-index\">2</sub>,...,<i>b</i><sub class=\"lower-index\"><i>m</i></sub></span> (<span class=\"tex-span\">1&le;<i>b</i><sub class=\"lower-index\">1</sub>&le;<i>b</i><sub class=\"lower-index\">2</sub>...&le;<i>b</i><sub class=\"lower-index\"><i>m</i></sub>&le;10<sup class=\"upper-index\">6</sup></span>) &minus; the complexities of the problems prepared by George. </p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer &minus; the answer to the problem.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>3 5<br/>1 2 3<br/>1 2 2 3 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>0<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3 5<br/>1 2 3<br/>1 1 1 1 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3 1<br/>2 3 4<br/>1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample the set of the prepared problems meets the requirements for a good round.</p><p>In the second sample, it is enough to come up with and prepare two problems with complexities <span class=\"tex-span\">2</span> and <span class=\"tex-span\">3</span> to get a good round.</p><p>In the third sample it is very easy to get a good round if come up with and prepare extra problems with complexities: <span class=\"tex-span\">2,3,4</span>. </p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}