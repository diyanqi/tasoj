{"title": "Fractal", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B. Fractal</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>64 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>input.txt</div><div class=\"output-file\"><div class=\"property-title\">output</div>output.txt</div></div><div><p>Ever since Kalevitch, a famous Berland abstractionist, heard of fractals, he made them the main topic of his canvases. Every morning the artist takes a piece of graph paper and starts with making a model of his future canvas. He takes a square as big as <span class=\"tex-span\"><i>n</i>&times;<i>n</i></span> squares and paints some of them black. Then he takes a clean square piece of paper and paints the fractal using the following algorithm: </p><p>Step 1. The paper is divided into <span class=\"tex-span\"><i>n</i><sup class=\"upper-index\">2</sup></span> identical squares and some of them are painted black according to the model.</p><p>Step 2. Every square that remains white is divided into <span class=\"tex-span\"><i>n</i><sup class=\"upper-index\">2</sup></span> smaller squares and some of them are painted black according to the model.</p><p>Every following step repeats step 2.</p><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/c328264ed897f61ec8eaf6a1b735f0be74ca77ee3.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>Unfortunately, this tiresome work demands too much time from the painting genius. Kalevitch has been dreaming of making the process automatic to move to making 3D or even 4D fractals.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">2&le;<i>n</i>&le;3</span>, <span class=\"tex-span\">1&le;<i>k</i>&le;5</span>), where <span class=\"tex-span\"><i>k</i></span> is the amount of steps of the algorithm. Each of the following <span class=\"tex-span\"><i>n</i></span> lines contains <span class=\"tex-span\"><i>n</i></span> symbols that determine the model. Symbol &laquo;.&raquo; stands for a white square, whereas &laquo;*&raquo; stands for a black one. It is guaranteed that the model has at least one white square. </p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output a matrix <span class=\"tex-span\"><i>n</i><sup class=\"upper-index\"><i>k</i></sup>&times;<i>n</i><sup class=\"upper-index\"><i>k</i></sup></span> which is what a picture should look like after <span class=\"tex-span\"><i>k</i></span> steps of the algorithm.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>2 3<br/>.*<br/>..<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>.*******<br/>..******<br/>.*.*****<br/>....****<br/>.***.***<br/>..**..**<br/>.*.*.*.*<br/>........<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3 2<br/>.*.<br/>***<br/>.*.<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>.*.***.*.<br/>*********<br/>.*.***.*.<br/>*********<br/>*********<br/>*********<br/>.*.***.*.<br/>*********<br/>.*.***.*.<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 64, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}