{"title": "More Reclamation", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. More Reclamation</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>In a far away land, there are two cities near a river. One day, the cities decide that they have too little space and would like to reclaim some of the river area into land.</p><p>The river area can be represented by a grid with <span class=\"tex-span\"><i>r</i></span> rows and exactly two columns &minus; each cell represents a rectangular area. The rows are numbered <span class=\"tex-span\">1</span> through <span class=\"tex-span\"><i>r</i></span> from top to bottom, while the columns are numbered <span class=\"tex-span\">1</span> and <span class=\"tex-span\">2</span>.</p><p>Initially, all of the cells are occupied by the river. The plan is to turn some of those cells into land one by one, with the cities alternately choosing a cell to reclaim, and continuing until no more cells can be reclaimed.</p><p>However, the river is also used as a major trade route. The cities need to make sure that ships will still be able to sail from one end of the river to the other. More formally, if a cell <span class=\"tex-span\">(<i>r</i>,<i>c</i>)</span> has been reclaimed, it is not allowed to reclaim any of the cells <span class=\"tex-span\">(<i>r</i>-1,3-<i>c</i>)</span>, <span class=\"tex-span\">(<i>r</i>,3-<i>c</i>)</span>, or <span class=\"tex-span\">(<i>r</i>+1,3-<i>c</i>)</span>.</p><p>The cities are not on friendly terms, and each city wants to be the last city to reclaim a cell (they don't care about how many cells they reclaim, just who reclaims a cell last). The cities have already reclaimed <span class=\"tex-span\"><i>n</i></span> cells. Your job is to determine which city will be the last to reclaim a cell, assuming both choose cells optimally from current moment.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line consists of two integers <span class=\"tex-span\"><i>r</i></span> and <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>r</i>&le;100,0&le;<i>n</i>&le;<i>r</i></span>). Then <span class=\"tex-span\"><i>n</i></span> lines follow, describing the cells that were already reclaimed. Each line consists of two integers: <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>r</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>r</i>,1&le;<i>c</i><sub class=\"lower-index\"><i>i</i></sub>&le;2</span>), which represent the cell located at row <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> and column <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span>. All of the lines describing the cells will be distinct, and the reclaimed cells will not violate the constraints above.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output \"<span class=\"tex-font-style-tt\">WIN</span>\" if the city whose turn it is to choose a cell can guarantee that they will be the last to choose a cell. Otherwise print \"<span class=\"tex-font-style-tt\">LOSE</span>\".</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>3 1<br/>1 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>WIN<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>12 2<br/>4 1<br/>8 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>WIN<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>1 1<br/>1 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>LOSE<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first example, there are 3 possible cells for the first city to reclaim: <span class=\"tex-span\">(2,1)</span>, <span class=\"tex-span\">(3,1)</span>, or <span class=\"tex-span\">(3,2)</span>. The first two possibilities both lose, as they leave exactly one cell for the other city.</p><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/bb5021ce4624da3b507e39de1870070c037a135a0.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>However, reclaiming the cell at <span class=\"tex-span\">(3,2)</span> leaves no more cells that can be reclaimed, and therefore the first city wins.</p><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/49d930ec78e47550580a90dbdbc7e5296e2906ce0.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>In the third example, there are no cells that can be reclaimed.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}