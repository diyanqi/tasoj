{"title": "Robot Sequence", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">A. Robot Sequence</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Calvin the robot lies in an infinite rectangular grid. Calvin's source code contains a list of <span class=\"tex-span\"><i>n</i></span> commands, each either '<span class=\"tex-font-style-tt\">U</span>', '<span class=\"tex-font-style-tt\">R</span>', '<span class=\"tex-font-style-tt\">D</span>', or '<span class=\"tex-font-style-tt\">L</span>'&minus; instructions to move a single square up, right, down, or left, respectively. How many ways can Calvin execute a non-empty contiguous substrings of commands and return to the same square he starts in? Two substrings are considered different if they have different starting or ending indices.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains a single positive integer, <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;200</span>)&minus; the number of commands.</p><p>The next line contains <span class=\"tex-span\"><i>n</i></span> characters, each either '<span class=\"tex-font-style-tt\">U</span>', '<span class=\"tex-font-style-tt\">R</span>', '<span class=\"tex-font-style-tt\">D</span>', or '<span class=\"tex-font-style-tt\">L</span>'&minus; Calvin's source code.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer&minus; the number of contiguous substrings that Calvin can execute and return to his starting square.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>6<br/>URLLDR<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>4<br/>DLUU<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>0<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>7<br/>RLRLRLR<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>12<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first case, the entire source code works, as well as the \"<span class=\"tex-font-style-tt\">RL</span>\" substring in the second and third characters.</p><p>Note that, in the third case, the substring \"<span class=\"tex-font-style-tt\">LR</span>\" appears three times, and is therefore counted three times to the total result.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}