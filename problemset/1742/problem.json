{"title": "Test Data Generation", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">F. Test Data Generation</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>5 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Test data generation is not an easy task! Often, generating big random test cases is not enough to ensure thorough testing of solutions for correctness.</p><p>For example, consider a problem from an old Codeforces round. Its input format looks roughly as follows:</p><p><span class=\"tex-font-style-it\">The first line contains a single integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;<i>max</i><sub class=\"lower-index\"><i>n</i></sub></span>)&minus; the size of the set. The second line contains <span class=\"tex-span\"><i>n</i></span> distinct integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,<i>a</i><sub class=\"lower-index\">2</sub>,...,<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">1&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>max</i><sub class=\"lower-index\"><i>a</i></sub></span>)&minus; the elements of the set <span class=\"tex-font-style-bf\">in increasing order</span>.</span></p><p>If you don't pay attention to the problem solution, it looks fairly easy to generate a good test case for this problem. Let <span class=\"tex-span\"><i>n</i>=<i>max</i><sub class=\"lower-index\"><i>n</i></sub></span>, take random distinct <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> from 1 to <span class=\"tex-span\"><i>max</i><sub class=\"lower-index\"><i>a</i></sub></span>, sort them... Soon you understand that it's not that easy.</p><p>Here is the actual problem solution. Let <span class=\"tex-span\"><i>g</i></span> be the greatest common divisor of <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,<i>a</i><sub class=\"lower-index\">2</sub>,...,<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span>. Let <span class=\"tex-span\"><i>x</i>=<i>a</i><sub class=\"lower-index\"><i>n</i></sub>/<i>g</i>-<i>n</i></span>. Then the correct solution outputs \"<span class=\"tex-font-style-tt\">Alice</span>\" if <span class=\"tex-span\"><i>x</i></span> is odd, and \"<span class=\"tex-font-style-tt\">Bob</span>\" if <span class=\"tex-span\"><i>x</i></span> is even.</p><p>Consider two wrong solutions to this problem which differ from the correct one only in the formula for calculating <span class=\"tex-span\"><i>x</i></span>.</p><p>The first wrong solution calculates <span class=\"tex-span\"><i>x</i></span> as <span class=\"tex-span\"><i>x</i>=<i>a</i><sub class=\"lower-index\"><i>n</i></sub>/<i>g</i></span> (without subtracting <span class=\"tex-span\"><i>n</i></span>).</p><p>The second wrong solution calculates <span class=\"tex-span\"><i>x</i></span> as <span class=\"tex-span\"><i>x</i>=<i>a</i><sub class=\"lower-index\"><i>n</i></sub>-<i>n</i></span> (without dividing by <span class=\"tex-span\"><i>g</i></span>).</p><p>A test case is interesting if it makes <span class=\"tex-font-style-bf\">both</span> wrong solutions output an incorrect answer.</p><p>Given <span class=\"tex-span\"><i>max</i><sub class=\"lower-index\"><i>n</i></sub></span>, <span class=\"tex-span\"><i>max</i><sub class=\"lower-index\"><i>a</i></sub></span> and <span class=\"tex-span\"><i>q</i></span>, find the number of interesting test cases satisfying the constraints, and output it modulo <span class=\"tex-span\"><i>q</i></span>.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The only line contains three integers <span class=\"tex-span\"><i>max</i><sub class=\"lower-index\"><i>n</i></sub></span>, <span class=\"tex-span\"><i>max</i><sub class=\"lower-index\"><i>a</i></sub></span> and <span class=\"tex-span\"><i>q</i></span> (<span class=\"tex-span\">1&le;<i>max</i><sub class=\"lower-index\"><i>n</i></sub>&le;30000</span>; <span class=\"tex-span\"><i>max</i><sub class=\"lower-index\"><i>n</i></sub>&le;<i>max</i><sub class=\"lower-index\"><i>a</i></sub>&le;10<sup class=\"upper-index\">9</sup></span>; <span class=\"tex-span\">10<sup class=\"upper-index\">4</sup>&le;<i>q</i>&le;10<sup class=\"upper-index\">5</sup>+129</span>).</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output a single integer&minus; the number of test cases which satisfy the constraints and make both wrong solutions output an incorrect answer, modulo <span class=\"tex-span\"><i>q</i></span>.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>3 6 100000<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>6 21 100129<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>154<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>58 787788 50216<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>46009<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first example, interesting test cases look as follows: </p><pre><br/>1              1              1              3<br/>2              4              6              2 4 6<br/></pre></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 5000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}