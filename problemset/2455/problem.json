{"title": "Agricultural Archaeology", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">L. Agricultural Archaeology</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>512 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Recently Berland archaeologists found ancient text describing agricultural field of ancient people. It had a form of <span class=\"tex-span\"><i>n</i>&times;<i>m</i></span> rectangle divided into <span class=\"tex-span\"><i>n</i>&middot;<i>m</i></span> unit cells. Each cell was sown with some kind of a food plant. There were 90 kinds of food plants popular in ancient Berland.</p><p>As written in the ancient text, region of each kind of food plant that was sown formed a single perfect square without any holes. Two square regions are adjacent if they share at least one unit cell border. The ancient text does not mention the sizes of the squares. But it provides something about the adjacent squares. For each square, it is known which kind of plants were sown to the each side of this square. Formally, for each food kind there are four lists: top neighbour kinds, right neighbour kinds, bottom neighbour kinds and left neighbour kinds. Food plants are written in arbitrary order in each list of neighbours.</p><p>Help archaeologists to reconstruct any possible agricultural field given the information from the ancient text.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains three integer numbers <span class=\"tex-span\"><i>n</i>,<i>m</i>,<i>k</i></span> <span class=\"tex-span\">(1&le;<i>n</i>,<i>m</i>&le;300,1&le;<i>k</i>&le;90)</span>&minus; the sizes of the field and the number of the sown kinds of food plants. </p><p>The sown food plants are encoded with characters which ASCII codes are from 33 ('<span class=\"tex-font-style-tt\">!</span>') to 122 ('<span class=\"tex-font-style-tt\">z</span>') inclusively. </p><p>Each of the following lines describes one sown food plant (square) and has the format: \"<span class=\"tex-font-style-tt\">char top right bottom left</span>\", where <span class=\"tex-font-style-tt\">char</span> is the character encoding the plant, and <span class=\"tex-font-style-tt\">top</span>, <span class=\"tex-font-style-tt\">right</span>, <span class=\"tex-font-style-tt\">bottom</span>, <span class=\"tex-font-style-tt\">left</span> are the strings of ASCII characters with codes from 33 to 122&minus; the lists of corresponding neighbours (all characters in each list are unique and written in arbitrary order). The empty list of neighbours is given by the character '<span class=\"tex-font-style-tt\"></span>' which ASCII code is 126. All characters which encode the sown food plants are different.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the field in the form of <span class=\"tex-span\"><i>n</i>&times;<i>m</i></span> matrix of characters with ASCII codes from 33 to 122&minus; possible field corresponding to the given input. If there are many solutions, print any of them. It is guaranteed that at least one solution exists.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>5 4 6<br/>a {} b zc {}<br/>z ba {} {} dce<br/>e d z {} {}<br/>b {} {} z a<br/>c a z d {}<br/>d c z e {}</pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>aabb<br/>aabb<br/>czzz<br/>dzzz<br/>ezzz<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 512, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}