{"title": "Design Tutorial: Make It Nondeterministic", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Design Tutorial: Make It Nondeterministic</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>A way to make a new task is to make it nondeterministic or probabilistic. For example, the hard task of Topcoder SRM 595, Constellation, is the probabilistic version of a convex hull.</p><p>Let's try to make a new task. Firstly we will use the following task. There are <span class=\"tex-span\"><i>n</i></span> people, sort them by their name. It is just an ordinary sorting problem, but we can make it more interesting by adding nondeterministic element. There are <span class=\"tex-span\"><i>n</i></span> people, each person will use either his/her first name or last name as a handle. Can the lexicographical order of the handles be exactly equal to the given permutation <span class=\"tex-span\"><i>p</i></span>?</p><p>More formally, if we denote the handle of the <span class=\"tex-span\"><i>i</i></span>-th person as <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\"><i>i</i></sub></span>, then the following condition must hold: <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/ff6cd0f5436ff22e749e8c8aa8161f65f54e315714.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains an integer <span class=\"tex-span\"><i>n</i></span> <span class=\"tex-span\">(1&le;<i>n</i>&le;10<sup class=\"upper-index\">5</sup>)</span> &minus; the number of people.</p><p>The next <span class=\"tex-span\"><i>n</i></span> lines each contains two strings. The <span class=\"tex-span\"><i>i</i></span>-th line contains strings <span class=\"tex-span\"><i>f</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> <span class=\"tex-span\">(1&le;|<i>f</i><sub class=\"lower-index\"><i>i</i></sub>|,|<i>s</i><sub class=\"lower-index\"><i>i</i></sub>|&le;50)</span> &minus; the first name and last name of the <span class=\"tex-span\"><i>i</i></span>-th person. Each string consists only of lowercase English letters. All of the given <span class=\"tex-span\">2<i>n</i></span> strings will be distinct.</p><p>The next line contains <span class=\"tex-span\"><i>n</i></span> distinct integers: <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\">1</sub>,<i>p</i><sub class=\"lower-index\">2</sub>,...,<i>p</i><sub class=\"lower-index\"><i>n</i></sub></span> <span class=\"tex-span\">(1&le;<i>p</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i>)</span>.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>If it is possible, output \"<span class=\"tex-font-style-tt\">YES</span>\", otherwise output \"<span class=\"tex-font-style-tt\">NO</span>\".</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>3<br/>gennady korotkevich<br/>petr mitrichev<br/>gaoyuan chen<br/>1 2 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>NO<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3<br/>gennady korotkevich<br/>petr mitrichev<br/>gaoyuan chen<br/>3 1 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>YES<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>2<br/>galileo galilei<br/>nicolaus copernicus<br/>2 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>YES<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>10<br/>rean schwarzer<br/>fei claussell<br/>alisa reinford<br/>eliot craig<br/>laura arseid<br/>jusis albarea<br/>machias regnitz<br/>sara valestin<br/>emma millstein<br/>gaius worzel<br/>1 2 3 4 5 6 7 8 9 10<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>NO<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>10<br/>rean schwarzer<br/>fei claussell<br/>alisa reinford<br/>eliot craig<br/>laura arseid<br/>jusis albarea<br/>machias regnitz<br/>sara valestin<br/>emma millstein<br/>gaius worzel<br/>2 4 9 6 5 7 1 3 8 10<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>YES<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In example 1 and 2, we have 3 people: tourist, Petr and me (cgy4ever). You can see that whatever handle is chosen, I must be the first, then tourist and Petr must be the last.</p><p>In example 3, if Copernicus uses \"copernicus\" as his handle, everything will be alright.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}