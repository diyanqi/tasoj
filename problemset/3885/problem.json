{"title": "Cutting Figure", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">A. Cutting Figure</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>You've gotten an <span class=\"tex-span\"><i>n</i>&times;<i>m</i></span> sheet of squared paper. Some of its squares are painted. Let's mark the set of all painted squares as <span class=\"tex-span\"><i>A</i></span>. Set <span class=\"tex-span\"><i>A</i></span> is connected. Your task is to find the minimum number of squares that we can delete from set <span class=\"tex-span\"><i>A</i></span> to make it not connected.</p><p>A set of painted squares is called <span class=\"tex-font-style-it\">connected</span>, if for every two squares <span class=\"tex-span\"><i>a</i></span> and <span class=\"tex-span\"><i>b</i></span> from this set there is a sequence of squares from the set, beginning in <span class=\"tex-span\"><i>a</i></span> and ending in <span class=\"tex-span\"><i>b</i></span>, such that in this sequence any square, except for the last one, shares a common side with the square that follows next in the sequence. An empty set and a set consisting of exactly one square are connected by definition.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first input line contains two space-separated integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1&le;<i>n</i>,<i>m</i>&le;50</span>) &minus; the sizes of the sheet of paper. </p><p>Each of the next <span class=\"tex-span\"><i>n</i></span> lines contains <span class=\"tex-span\"><i>m</i></span> characters &minus; the description of the sheet of paper: the <span class=\"tex-span\"><i>j</i></span>-th character of the <span class=\"tex-span\"><i>i</i></span>-th line equals either \"#\", if the corresponding square is painted (belongs to set <span class=\"tex-span\"><i>A</i></span>), or equals \".\" if the corresponding square is not painted (does not belong to set <span class=\"tex-span\"><i>A</i></span>). It is guaranteed that the set of all painted squares <span class=\"tex-span\"><i>A</i></span> is connected and isn't empty.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>On the first line print the minimum number of squares that need to be deleted to make set <span class=\"tex-span\"><i>A</i></span> not connected. If it is impossible, print -1. </p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>5 4<br/>####<br/>#..#<br/>#..#<br/>#..#<br/>####<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>5 5<br/>#####<br/>#...#<br/>#####<br/>#...#<br/>#####<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample you can delete any two squares that do not share a side. After that the set of painted squares is not connected anymore.</p><p>The note to the second sample is shown on the figure below. To the left there is a picture of the initial set of squares. To the right there is a set with deleted squares. The deleted squares are marked with crosses. </p><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/f28c0660a5f4d7ddfc32ba959d0f79e6bbacdd8748.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}