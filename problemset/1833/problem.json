{"title": "New Year and Old Subsequence", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. New Year and Old Subsequence</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>3 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>A string <span class=\"tex-span\"><i>t</i></span> is called <span class=\"tex-font-style-it\">nice</span> if a string \"<span class=\"tex-font-style-tt\">2017</span>\" occurs in <span class=\"tex-span\"><i>t</i></span> as a <span class=\"tex-font-style-bf\">subsequence</span> but a string \"<span class=\"tex-font-style-tt\">2016</span>\" doesn't occur in <span class=\"tex-span\"><i>t</i></span> as a <span class=\"tex-font-style-bf\">subsequence</span>. For example, strings \"<span class=\"tex-font-style-tt\">203434107</span>\" and \"<span class=\"tex-font-style-tt\">9220617</span>\" are nice, while strings \"<span class=\"tex-font-style-tt\">20016</span>\", \"<span class=\"tex-font-style-tt\">1234</span>\" and \"<span class=\"tex-font-style-tt\">20167</span>\" aren't nice.</p><p>The <span class=\"tex-font-style-it\">ugliness</span> of a string is the minimum possible number of characters to remove, in order to obtain a nice string. If it's impossible to make a string nice by removing characters, its ugliness is <span class=\"tex-span\">-1</span>.</p><p>Limak has a string <span class=\"tex-span\"><i>s</i></span> of length <span class=\"tex-span\"><i>n</i></span>, with characters indexed <span class=\"tex-span\">1</span> through <span class=\"tex-span\"><i>n</i></span>. He asks you <span class=\"tex-span\"><i>q</i></span> queries. In the <span class=\"tex-span\"><i>i</i></span>-th query you should compute and print the ugliness of a <span class=\"tex-font-style-bf\">substring</span> (continuous subsequence) of <span class=\"tex-span\"><i>s</i></span> starting at the index <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> and ending at the index <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> (inclusive).</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>q</i></span> (<span class=\"tex-span\">4&le;<i>n</i>&le;200000</span>, <span class=\"tex-span\">1&le;<i>q</i>&le;200000</span>)&minus; the length of the string <span class=\"tex-span\"><i>s</i></span> and the number of queries respectively.</p><p>The second line contains a string <span class=\"tex-span\"><i>s</i></span> of length <span class=\"tex-span\"><i>n</i></span>. Every character is one of digits '<span class=\"tex-font-style-tt\">0</span>'&mdash;'<span class=\"tex-font-style-tt\">9</span>'.</p><p>The <span class=\"tex-span\"><i>i</i></span>-th of next <span class=\"tex-span\"><i>q</i></span> lines contains two integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>b</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>), describing a substring in the <span class=\"tex-span\"><i>i</i></span>-th query.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each query print the ugliness of the given substring.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>8 3<br/>20166766<br/>1 8<br/>1 7<br/>2 8<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/>3<br/>-1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>15 5<br/>012016662091670<br/>3 4<br/>1 14<br/>4 15<br/>1 13<br/>10 15<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>-1<br/>2<br/>1<br/>-1<br/>-1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>4 2<br/>1234<br/>2 4<br/>1 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>-1<br/>-1<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample:</p><ul> <li> In the first query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">20166766</span>\"<span class=\"tex-span\">)=4</span> because all four sixes must be removed. </li><li> In the second query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">2016676</span>\"<span class=\"tex-span\">)=3</span> because all three sixes must be removed. </li><li> In the third query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">0166766</span>\"<span class=\"tex-span\">)=-1</span> because it's impossible to remove some digits to get a nice string. </li></ul><p>In the second sample:</p><ul> <li> In the second query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">01201666209167</span>\"<span class=\"tex-span\">)=2</span>. It's optimal to remove the first digit '<span class=\"tex-font-style-tt\">2</span>' and the last digit '<span class=\"tex-font-style-tt\">6</span>', what gives a string \"<span class=\"tex-font-style-tt\">010166620917</span>\", which is nice. </li><li> In the third query, <span class=\"tex-span\"><i>ugliness</i>(</span>\"<span class=\"tex-font-style-tt\">016662091670</span>\"<span class=\"tex-span\">)=1</span>. It's optimal to remove the last digit '<span class=\"tex-font-style-tt\">6</span>', what gives a nice string \"<span class=\"tex-font-style-tt\">01666209170</span>\". </li></ul></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 3000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}