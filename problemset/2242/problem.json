{"title": "Three-dimensional Turtle Super Computer", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">D. Three-dimensional Turtle Super Computer </div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>3 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>A super computer has been built in the Turtle Academy of Sciences. The computer consists of <span class=\"tex-span\"><i>n</i>&middot;<i>m</i>&middot;<i>k</i></span> CPUs. The architecture was the paralellepiped of size <span class=\"tex-span\"><i>n</i>&times;<i>m</i>&times;<i>k</i></span>, split into <span class=\"tex-span\">1&times;1&times;1</span> cells, each cell contains exactly one CPU. Thus, each CPU can be simultaneously identified as a group of three numbers from the layer number from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>, the line number from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>m</i></span> and the column number from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>k</i></span>.</p><p>In the process of the Super Computer's work the CPUs can send each other messages by the famous turtle scheme: CPU <span class=\"tex-span\">(<i>x</i>,<i>y</i>,<i>z</i>)</span> can send messages to CPUs <span class=\"tex-span\">(<i>x</i>+1,<i>y</i>,<i>z</i>)</span>, <span class=\"tex-span\">(<i>x</i>,<i>y</i>+1,<i>z</i>)</span> and <span class=\"tex-span\">(<i>x</i>,<i>y</i>,<i>z</i>+1)</span> (of course, if they exist), there is no feedback, that is, CPUs <span class=\"tex-span\">(<i>x</i>+1,<i>y</i>,<i>z</i>)</span>, <span class=\"tex-span\">(<i>x</i>,<i>y</i>+1,<i>z</i>)</span> and <span class=\"tex-span\">(<i>x</i>,<i>y</i>,<i>z</i>+1)</span> cannot send messages to CPU <span class=\"tex-span\">(<i>x</i>,<i>y</i>,<i>z</i>)</span>.</p><p>Over time some CPUs broke down and stopped working. Such CPUs cannot send messages, receive messages or serve as intermediates in transmitting messages. We will say that CPU <span class=\"tex-span\">(<i>a</i>,<i>b</i>,<i>c</i>)</span> <span class=\"tex-font-style-it\">controls</span> CPU <span class=\"tex-span\">(<i>d</i>,<i>e</i>,<i>f</i>)</span> , if there is a chain of CPUs <span class=\"tex-span\">(<i>x</i><sub class=\"lower-index\"><i>i</i></sub>,<i>y</i><sub class=\"lower-index\"><i>i</i></sub>,<i>z</i><sub class=\"lower-index\"><i>i</i></sub>)</span>, such that <span class=\"tex-span\">(<i>x</i><sub class=\"lower-index\">1</sub>=<i>a</i>,<i>y</i><sub class=\"lower-index\">1</sub>=<i>b</i>,<i>z</i><sub class=\"lower-index\">1</sub>=<i>c</i>)</span>, <span class=\"tex-span\">(<i>x</i><sub class=\"lower-index\"><i>p</i></sub>=<i>d</i>,<i>y</i><sub class=\"lower-index\"><i>p</i></sub>=<i>e</i>,<i>z</i><sub class=\"lower-index\"><i>p</i></sub>=<i>f</i>)</span> (here and below <span class=\"tex-span\"><i>p</i></span> is the length of the chain) and the CPU in the chain with number <span class=\"tex-span\"><i>i</i></span> (<span class=\"tex-span\"><i>i</i>&lt;<i>p</i></span>) can send messages to CPU <span class=\"tex-span\"><i>i</i>+1</span>.</p><p>Turtles are quite concerned about the denial-proofness of the system of communication between the remaining CPUs. For that they want to know the number of critical CPUs. A CPU <span class=\"tex-span\">(<i>x</i>,<i>y</i>,<i>z</i>)</span> is <span class=\"tex-font-style-it\">critical</span>, if turning it off will disrupt some control, that is, if there are two distinctive from <span class=\"tex-span\">(<i>x</i>,<i>y</i>,<i>z</i>)</span> CPUs: <span class=\"tex-span\">(<i>a</i>,<i>b</i>,<i>c</i>)</span> and <span class=\"tex-span\">(<i>d</i>,<i>e</i>,<i>f</i>)</span>, such that <span class=\"tex-span\">(<i>a</i>,<i>b</i>,<i>c</i>)</span> controls <span class=\"tex-span\">(<i>d</i>,<i>e</i>,<i>f</i>)</span> before <span class=\"tex-span\">(<i>x</i>,<i>y</i>,<i>z</i>)</span> is turned off and stopped controlling it after the turning off.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains three integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>m</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1&le;<i>n</i>,<i>m</i>,<i>k</i>&le;100</span>)&minus; the dimensions of the Super Computer. </p><p>Then <span class=\"tex-span\"><i>n</i></span> blocks follow, describing the current state of the processes. The blocks correspond to the layers of the Super Computer in the order from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>. Each block consists of <span class=\"tex-span\"><i>m</i></span> lines, <span class=\"tex-span\"><i>k</i></span> characters in each &minus; the description of a layer in the format of an <span class=\"tex-span\"><i>m</i>&times;<i>k</i></span> table. Thus, the state of the CPU <span class=\"tex-span\">(<i>x</i>,<i>y</i>,<i>z</i>)</span> is corresponded to the <span class=\"tex-span\"><i>z</i></span>-th character of the <span class=\"tex-span\"><i>y</i></span>-th line of the block number <span class=\"tex-span\"><i>x</i></span>. Character \"<span class=\"tex-font-style-tt\">1</span>\" corresponds to a working CPU and character \"<span class=\"tex-font-style-tt\">0</span>\" corresponds to a malfunctioning one. The blocks are separated by exactly one empty line.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer &minus; the number of critical CPUs, that is, such that turning only this CPU off will disrupt some control.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>2 2 3<br/>000<br/>000<br/><br/>111<br/>111<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3 3 3<br/>111<br/>111<br/>111<br/><br/>111<br/>111<br/>111<br/><br/>111<br/>111<br/>111<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>19<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>1 1 10<br/>0101010101<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>0<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample the whole first layer of CPUs is malfunctional. In the second layer when CPU <span class=\"tex-span\">(2,1,2)</span> turns off, it disrupts the control by CPU <span class=\"tex-span\">(2,1,3)</span> over CPU <span class=\"tex-span\">(2,1,1)</span>, and when CPU <span class=\"tex-span\">(2,2,2)</span> is turned off, it disrupts the control over CPU <span class=\"tex-span\">(2,2,3)</span> by CPU <span class=\"tex-span\">(2,2,1)</span>.</p><p>In the second sample all processors except for the corner ones are critical.</p><p>In the third sample there is not a single processor controlling another processor, so the answer is <span class=\"tex-span\">0</span>.</p></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 3000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}