{"title": "Comments", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Comments</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>A rare article in the Internet is posted without a possibility to comment it. On a Polycarp's website each article has comments feed.</p><p>Each comment on Polycarp's website is a non-empty string consisting of uppercase and lowercase letters of English alphabet. Comments have tree-like structure, that means each comment except root comments (comments of the highest level) has exactly one parent comment.</p><p>When Polycarp wants to save comments to his hard drive he uses the following format. Each comment he writes in the following format: </p><ul> <li> at first, the text of the comment is written; </li><li> after that the number of comments is written, for which this comment is a parent comment (i.e. the number of the replies to this comments); </li><li> after that the comments for which this comment is a parent comment are written (the writing of these comments uses the same algorithm). </li></ul> All elements in this format are separated by single comma. Similarly, the comments of the first level are separated by comma.<p>For example, if the comments look like:</p><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/8d7c58c6b271b12ded16bd15ebd360527f78c7164242.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>then the first comment is written as \"<span class=\"tex-font-style-tt\">hello,2,ok,0,bye,0</span>\", the second is written as \"<span class=\"tex-font-style-tt\">test,0</span>\", the third comment is written as \"<span class=\"tex-font-style-tt\">one,1,two,2,a,0,b,0</span>\". The whole comments feed is written as: \"<span class=\"tex-font-style-tt\">hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0</span>\". For a given comments feed in the format specified above print the comments in a different format: </p><ul> <li> at first, print a integer <span class=\"tex-span\"><i>d</i></span>&minus; the maximum depth of nesting comments; </li><li> after that print <span class=\"tex-span\"><i>d</i></span> lines, the <span class=\"tex-span\"><i>i</i></span>-th of them corresponds to nesting level <span class=\"tex-span\"><i>i</i></span>; </li><li> for the <span class=\"tex-span\"><i>i</i></span>-th row print comments of nesting level <span class=\"tex-span\"><i>i</i></span> in the order of their appearance in the Policarp's comments feed, separated by space. </li></ul></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains non-empty comments feed in the described format. It consists of uppercase and lowercase letters of English alphabet, digits and commas. </p><p>It is guaranteed that each comment is a non-empty string consisting of uppercase and lowercase English characters. Each of the number of comments is integer (consisting of at least one digit), and either equals <span class=\"tex-span\">0</span> or does not contain leading zeros.</p><p>The length of the whole string does not exceed <span class=\"tex-span\">10<sup class=\"upper-index\">6</sup></span>. It is guaranteed that given structure of comments is valid. </p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print comments in a format that is given in the statement. For each level of nesting, comments should be printed in the order they are given in the input.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3<br/>hello test one <br/>ok bye two <br/>a b <br/></pre></div><br/><br/><div class=\"input\"><div class=\"title\">Input</div><pre>a,5,A,0,a,0,A,0,a,0,A,0<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/>a <br/>A a A a A <br/></pre></div><br/><br/><div class=\"input\"><div class=\"title\">Input</div><pre>A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/>A K M <br/>B F H L N O <br/>C D G I P <br/>E J <br/></pre></div><br/></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>The first example is explained in the statements. </p></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}