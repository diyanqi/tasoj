{"title": "Xor-matic Number of the Graph", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">G. Xor-matic Number of the Graph</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>You are given an undirected graph, constisting of <span class=\"tex-span\"><i>n</i></span> vertices and <span class=\"tex-span\"><i>m</i></span> edges. Each edge of the graph has some non-negative integer written on it.</p><p>Let's call a triple <span class=\"tex-span\">(<i>u</i>,<i>v</i>,<i>s</i>)</span> <span class=\"tex-font-style-bf\">interesting</span>, if <span class=\"tex-span\">1&le;<i>u</i>&lt;<i>v</i>&le;<i>n</i></span> and there is a path (<span class=\"tex-font-style-bf\">possibly non-simple</span>, i.e. it can visit the same vertices and edges multiple times) between vertices <span class=\"tex-span\"><i>u</i></span> and <span class=\"tex-span\"><i>v</i></span> such that xor of all numbers written on the edges of this path is equal to <span class=\"tex-span\"><i>s</i></span>. <span class=\"tex-font-style-bf\">When we compute the value s for some path, each edge is counted in xor as many times, as it appear on this path.</span> It's not hard to prove that there are finite number of such triples.</p><p>Calculate the sum over modulo <span class=\"tex-span\">10<sup class=\"upper-index\">9</sup>+7</span> of the values of <span class=\"tex-span\"><i>s</i></span> over all <span class=\"tex-font-style-bf\">interesting</span> triples.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains two integers <span class=\"tex-span\"><i>n</i></span> and<span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;100000</span>, <span class=\"tex-span\">0&le;<i>m</i>&le;200000</span>)&minus; numbers of vertices and edges in the given graph.</p><p>The follow <span class=\"tex-span\"><i>m</i></span> lines contain three integers <span class=\"tex-span\"><i>u</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span> and<span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>u</i><sub class=\"lower-index\"><i>i</i></sub>,<i>v</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>, <span class=\"tex-span\">0&le;<i>t</i><sub class=\"lower-index\"><i>i</i></sub>&le;10<sup class=\"upper-index\">18</sup></span>, <span class=\"tex-span\"><i>u</i><sub class=\"lower-index\"><i>i</i></sub>&ne;<i>v</i><sub class=\"lower-index\"><i>i</i></sub></span>)&minus; vertices connected by the edge and integer written on it. It is guaranteed that graph doesn't contain self-loops and multiple edges.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the single integer, equal to the described sum over modulo <span class=\"tex-span\">10<sup class=\"upper-index\">9</sup>+7</span>.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>4 4<br/>1 2 1<br/>1 3 2<br/>2 3 3<br/>3 4 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>12<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>4 4<br/>1 2 1<br/>2 3 2<br/>3 4 4<br/>4 1 8<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>90<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>8 6<br/>1 2 2<br/>2 3 1<br/>2 4 4<br/>4 5 5<br/>4 6 3<br/>7 8 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>62<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first example the are <span class=\"tex-span\">6</span> interesting triples: </p><ol> <li> <span class=\"tex-span\">(1,2,1)</span> </li><li> <span class=\"tex-span\">(1,3,2)</span> </li><li> <span class=\"tex-span\">(1,4,3)</span> </li><li> <span class=\"tex-span\">(2,3,3)</span> </li><li> <span class=\"tex-span\">(2,4,2)</span> </li><li> <span class=\"tex-span\">(3,4,1)</span> </li></ol> The sum is equal to <span class=\"tex-span\">1+2+3+3+2+1=12</span>.<p>In the second example the are <span class=\"tex-span\">12</span> interesting triples: </p><ol> <li> <span class=\"tex-span\">(1,2,1)</span> </li><li> <span class=\"tex-span\">(2,3,2)</span> </li><li> <span class=\"tex-span\">(1,3,3)</span> </li><li> <span class=\"tex-span\">(3,4,4)</span> </li><li> <span class=\"tex-span\">(2,4,6)</span> </li><li> <span class=\"tex-span\">(1,4,7)</span> </li><li> <span class=\"tex-span\">(1,4,8)</span> </li><li> <span class=\"tex-span\">(2,4,9)</span> </li><li> <span class=\"tex-span\">(3,4,11)</span> </li><li> <span class=\"tex-span\">(1,3,12)</span> </li><li> <span class=\"tex-span\">(2,3,13)</span> </li><li> <span class=\"tex-span\">(1,2,14)</span> </li></ol> The sum is equal to <span class=\"tex-span\">1+2+3+4+6+7+8+9+11+12+13+14=90</span>.</div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}