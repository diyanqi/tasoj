{"title": "Martian Luck", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Martian Luck</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>You know that the Martians use a number system with base <span class=\"tex-span\"><i>k</i></span>. Digit <span class=\"tex-span\"><i>b</i></span> (<span class=\"tex-span\">0&le;<i>b</i>&lt;<i>k</i></span>) is considered <span class=\"tex-font-style-it\">lucky</span>, as the first contact between the Martians and the Earthlings occurred in year <span class=\"tex-span\"><i>b</i></span> (by Martian chronology).</p><p>A <span class=\"tex-font-style-it\">digital root</span> <span class=\"tex-span\"><i>d</i>(<i>x</i>)</span> of number <span class=\"tex-span\"><i>x</i></span> is a number that consists of a single digit, resulting after cascading summing of all digits of number <span class=\"tex-span\"><i>x</i></span>. Word \"cascading\" means that if the first summing gives us a number that consists of several digits, then we sum up all digits again, and again, until we get a one digit number.</p><p>For example, <span class=\"tex-span\"><i>d</i>(3504<sub class=\"lower-index\">7</sub>)=<i>d</i>((3+5+0+4)<sub class=\"lower-index\">7</sub>)=<i>d</i>(15<sub class=\"lower-index\">7</sub>)=<i>d</i>((1+5)<sub class=\"lower-index\">7</sub>)=<i>d</i>(6<sub class=\"lower-index\">7</sub>)=6<sub class=\"lower-index\">7</sub></span>. In this sample the calculations are performed in the 7-base notation.</p><p>If a number's digital root equals <span class=\"tex-span\"><i>b</i></span>, the Martians also call this number lucky.</p><p>You have string <span class=\"tex-span\"><i>s</i></span>, which consists of <span class=\"tex-span\"><i>n</i></span> digits in the <span class=\"tex-span\"><i>k</i></span>-base notation system. Your task is to find, how many distinct substrings of the given string are lucky numbers. Leading zeroes are permitted in the numbers.</p><p>Note that substring <span class=\"tex-span\"><i>s</i>[<i>i</i>... <i>j</i>]</span> of the string <span class=\"tex-span\"><i>s</i>=<i>a</i><sub class=\"lower-index\">1</sub><i>a</i><sub class=\"lower-index\">2</sub>... <i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">1&le;<i>i</i>&le;<i>j</i>&le;<i>n</i></span>) is the string <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub><i>a</i><sub class=\"lower-index\"><i>i</i>+1</sub>... <i>a</i><sub class=\"lower-index\"><i>j</i></sub></span>. Two substrings <span class=\"tex-span\"><i>s</i>[<i>i</i><sub class=\"lower-index\">1</sub>... <i>j</i><sub class=\"lower-index\">1</sub>]</span> and <span class=\"tex-span\"><i>s</i>[<i>i</i><sub class=\"lower-index\">2</sub>... <i>j</i><sub class=\"lower-index\">2</sub>]</span> of the string <span class=\"tex-span\"><i>s</i></span> are different if either <span class=\"tex-span\"><i>i</i><sub class=\"lower-index\">1</sub>&ne;<i>i</i><sub class=\"lower-index\">2</sub></span> or <span class=\"tex-span\"><i>j</i><sub class=\"lower-index\">1</sub>&ne;<i>j</i><sub class=\"lower-index\">2</sub></span>.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains three integers <span class=\"tex-span\"><i>k</i></span>, <span class=\"tex-span\"><i>b</i></span> and <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">2&le;<i>k</i>&le;10<sup class=\"upper-index\">9</sup></span>, <span class=\"tex-span\">0&le;<i>b</i>&lt;<i>k</i></span>, <span class=\"tex-span\">1&le;<i>n</i>&le;10<sup class=\"upper-index\">5</sup></span>).</p><p>The second line contains string <span class=\"tex-span\"><i>s</i></span> as a sequence of <span class=\"tex-span\"><i>n</i></span> integers, representing digits in the <span class=\"tex-span\"><i>k</i></span>-base notation: the <span class=\"tex-span\"><i>i</i></span>-th integer equals <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">0&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>&lt;<i>k</i></span>) &minus; the <span class=\"tex-span\"><i>i</i></span>-th digit of string <span class=\"tex-span\"><i>s</i></span>. The numbers in the lines are space-separated.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer &minus; the number of substrings that are lucky numbers.</p><p>Please, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>10 5 6<br/>3 2 0 5 6 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>5</pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>7 6 4<br/>3 5 0 4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1</pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>257 0 3<br/>0 0 256<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3</pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample the following substrings have the sought digital root: <span class=\"tex-span\"><i>s</i>[1... 2]</span> = \"3 2\", <span class=\"tex-span\"><i>s</i>[1... 3]</span> = \"3 2 0\", <span class=\"tex-span\"><i>s</i>[3... 4]</span> = \"0 5\", <span class=\"tex-span\"><i>s</i>[4... 4]</span> = \"5\" and <span class=\"tex-span\"><i>s</i>[2... 6]</span> = \"2 0 5 6 1\".</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}