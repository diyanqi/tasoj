{"title": "Little Elephant and Function", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">A. Little Elephant and Function</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>The Little Elephant enjoys recursive functions.</p><p>This time he enjoys the sorting function. Let <span class=\"tex-span\"><i>a</i></span> is a permutation of an integers from 1 to <span class=\"tex-span\"><i>n</i></span>, inclusive, and <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> denotes the <span class=\"tex-span\"><i>i</i></span>-th element of the permutation. The Little Elephant's recursive function <span class=\"tex-span\"><i>f</i>(<i>x</i>)</span>, that sorts the first <span class=\"tex-span\"><i>x</i></span> permutation's elements, works as follows:</p><ul> <li> If <span class=\"tex-span\"><i>x</i>=1</span>, exit the function. </li><li> Otherwise, call <span class=\"tex-span\"><i>f</i>(<i>x</i>-1)</span>, and then make <span class=\"tex-span\"><i>swap</i>(<i>a</i><sub class=\"lower-index\"><i>x</i>-1</sub>,<i>a</i><sub class=\"lower-index\"><i>x</i></sub>)</span> (swap the <span class=\"tex-span\"><i>x</i></span>-th and <span class=\"tex-span\">(<i>x</i>-1)</span>-th elements of <span class=\"tex-span\"><i>a</i></span>). </li></ul><p>The Little Elephant's teacher believes that this function does not work correctly. But that-be do not get an F, the Little Elephant wants to show the performance of its function. Help him, find a permutation of numbers from 1 to <span class=\"tex-span\"><i>n</i></span>, such that after performing the Little Elephant's function (that is call <span class=\"tex-span\"><i>f</i>(<i>n</i>)</span>), the permutation will be sorted in ascending order.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>A single line contains integer <span class=\"tex-span\"><i>n</i></span> <span class=\"tex-span\">(1&le;<i>n</i>&le;1000)</span> &minus; the size of permutation.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In a single line print <span class=\"tex-span\"><i>n</i></span> distinct integers from 1 to <span class=\"tex-span\"><i>n</i></span> &minus; the required permutation. Numbers in a line should be separated by spaces.</p><p>It is guaranteed that the answer exists.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1 </pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2 1 </pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}