{"title": "Brackets", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Brackets</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>A two dimensional array is called a <span class=\"tex-font-style-it\">bracket</span> array if each grid contains one of the two possible brackets &minus; \"(\" or \")\". A path through the two dimensional array cells is called <span class=\"tex-font-style-it\">monotonous</span> if any two consecutive cells in the path are side-adjacent and each cell of the path is located below or to the right from the previous one. </p><p>A two dimensional array whose size equals <span class=\"tex-span\"><i>n</i>&times;<i>m</i></span> is called a <span class=\"tex-font-style-it\">correct bracket</span> array, if any string formed by writing out the brackets on some monotonous way from cell <span class=\"tex-span\">(1,1)</span> to cell <span class=\"tex-span\">(<i>n</i>,<i>m</i>)</span> forms a correct bracket sequence. </p><p>Let's define the operation of comparing two correct bracket arrays of equal size (<span class=\"tex-span\"><i>a</i></span> and <span class=\"tex-span\"><i>b</i></span>) like that. Let's consider a given two dimensional array of priorities (<span class=\"tex-span\"><i>c</i></span>) &minus; a two dimensional array of same size, containing different integers from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>nm</i></span>. Let's find such position <span class=\"tex-span\">(<i>i</i>,<i>j</i>)</span> in the two dimensional array, that <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>&ne;<i>b</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub></span>. If there are several such positions, let's choose the one where number <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub></span> is minimum. If <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>=</span>\"(\", then <span class=\"tex-span\"><i>a</i>&lt;<i>b</i></span>, otherwise <span class=\"tex-span\"><i>a</i>&gt;<i>b</i></span>. If the position <span class=\"tex-span\">(<i>i</i>,<i>j</i>)</span> is not found, then the arrays are considered equal.</p><p>Your task is to find a <span class=\"tex-span\"><i>k</i></span>-th two dimensional correct bracket array. It is guaranteed that for the given sizes of <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> there will be no less than <span class=\"tex-span\"><i>k</i></span> two dimensional correct bracket arrays.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>m</i></span> and <span class=\"tex-span\"><i>k</i></span> &minus; the sizes of the array and the number of the sought correct bracket array (<span class=\"tex-span\">1&le;<i>n</i>,<i>m</i>&le;100</span>, <span class=\"tex-span\">1&le;<i>k</i>&le;10<sup class=\"upper-index\">18</sup></span>). Then an array of priorities is given, <span class=\"tex-span\"><i>n</i></span> lines each containing <span class=\"tex-span\"><i>m</i></span> numbers, number <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub></span> shows the priority of character <span class=\"tex-span\"><i>j</i></span> in line <span class=\"tex-span\"><i>i</i></span> (<span class=\"tex-span\">1&le;<i>p</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub>&le;<i>nm</i></span>, all <span class=\"tex-span\"><i>p</i><sub class=\"lower-index\"><i>i</i>,<i>j</i></sub></span> are different).</p><p>Please do not use the %lld specificator to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specificator.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the <span class=\"tex-span\"><i>k</i></span>-th two dimensional correct bracket array.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>1 2 1<br/>1 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>()<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>2 3 1<br/>1 2 3<br/>4 5 6<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>(()<br/>())<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3 2 2<br/>3 6<br/>1 4<br/>2 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>()<br/>)(<br/>()<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample exists only one correct two-dimensional bracket array.</p><p>In the second and in the third samples two arrays exist.</p><p>A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters &laquo;<span class=\"tex-font-style-tt\">+</span>&raquo; and &laquo;<span class=\"tex-font-style-tt\">1</span>&raquo; into this sequence. For example, sequences &laquo;<span class=\"tex-font-style-tt\">(())()</span>&raquo;, &laquo;<span class=\"tex-font-style-tt\">()</span>&raquo; and &laquo;<span class=\"tex-font-style-tt\">(()(()))</span>&raquo; are regular, while &laquo;<span class=\"tex-font-style-tt\">)(</span>&raquo;, &laquo;<span class=\"tex-font-style-tt\">(()</span>&raquo; and &laquo;<span class=\"tex-font-style-tt\">(()))(</span>&raquo; are not.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}