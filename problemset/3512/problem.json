{"title": "Parity Game", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">A. Parity Game</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>You are fishing with polar bears Alice and Bob. While waiting for the fish to bite, the polar bears get bored. They come up with a game. First Alice and Bob each writes a 01-string (strings that only contain character \"<span class=\"tex-font-style-tt\">0</span>\" and \"<span class=\"tex-font-style-tt\">1</span>\") <span class=\"tex-span\"><i>a</i></span> and <span class=\"tex-span\"><i>b</i></span>. Then you try to turn <span class=\"tex-span\"><i>a</i></span> into <span class=\"tex-span\"><i>b</i></span> using two types of operations:</p><ul> <li> Write <span class=\"tex-span\"><i>parity</i>(<i>a</i>)</span> to the end of <span class=\"tex-span\"><i>a</i></span>. For example, <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/cc3df2620b537ccff4fad83ad9a1958ca52aedc457.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>. </li><li> Remove the first character of <span class=\"tex-span\"><i>a</i></span>. For example, <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/de1d3e15a4d473ffe066e4eef44e20779655fa7957.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>. You cannot perform this operation if <span class=\"tex-span\"><i>a</i></span> is empty. </li></ul><p>You can use as many operations as you want. The problem is, is it possible to turn <span class=\"tex-span\"><i>a</i></span> into <span class=\"tex-span\"><i>b</i></span>?</p><p>The <span class=\"tex-span\"><i>parity</i></span> of a 01-string is <span class=\"tex-span\">1</span> if there is an odd number of \"<span class=\"tex-font-style-tt\">1</span>\"s in the string, and <span class=\"tex-span\">0</span> otherwise.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains the string <span class=\"tex-span\"><i>a</i></span> and the second line contains the string <span class=\"tex-span\"><i>b</i></span> <span class=\"tex-span\">(1&le;|<i>a</i>|,|<i>b</i>|&le;1000)</span>. Both strings contain only the characters \"<span class=\"tex-font-style-tt\">0</span>\" and \"<span class=\"tex-font-style-tt\">1</span>\". Here <span class=\"tex-span\">|<i>x</i>|</span> denotes the length of the string <span class=\"tex-span\"><i>x</i></span>.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print \"<span class=\"tex-font-style-tt\">YES</span>\" (without quotes) if it is possible to turn <span class=\"tex-span\"><i>a</i></span> into <span class=\"tex-span\"><i>b</i></span>, and \"<span class=\"tex-font-style-tt\">NO</span>\" (without quotes) otherwise.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>01011<br/>0110<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>YES<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>0011<br/>1110<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>NO<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample, the steps are as follows: <span class=\"tex-span\">01011&rarr;1011&rarr;011&rarr;0110</span></p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}