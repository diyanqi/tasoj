{"title": "Bear and Forgotten Tree 2", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Bear and Forgotten Tree 2</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>A tree is a connected undirected graph consisting of <span class=\"tex-span\"><i>n</i></span> vertices and <span class=\"tex-span\"><i>n</i>-1</span> edges. Vertices are numbered <span class=\"tex-span\">1</span> through <span class=\"tex-span\"><i>n</i></span>.</p><p>Limak is a little polar bear. He once had a tree with <span class=\"tex-span\"><i>n</i></span> vertices but he lost it. He still remembers something about the lost tree though.</p><p>You are given <span class=\"tex-span\"><i>m</i></span> pairs of vertices <span class=\"tex-span\">(<i>a</i><sub class=\"lower-index\">1</sub>,<i>b</i><sub class=\"lower-index\">1</sub>),(<i>a</i><sub class=\"lower-index\">2</sub>,<i>b</i><sub class=\"lower-index\">2</sub>),...,(<i>a</i><sub class=\"lower-index\"><i>m</i></sub>,<i>b</i><sub class=\"lower-index\"><i>m</i></sub>)</span>. Limak remembers that for each <span class=\"tex-span\"><i>i</i></span> there was <span class=\"tex-font-style-bf\">no edge</span> between <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>. He also remembers that vertex <span class=\"tex-span\">1</span> was incident to exactly <span class=\"tex-span\"><i>k</i></span> edges (its degree was equal to <span class=\"tex-span\"><i>k</i></span>).</p><p>Is it possible that Limak remembers everything correctly? Check whether there exists a tree satisfying the given conditions.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains three integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>m</i></span> and <span class=\"tex-span\"><i>k</i></span> (<img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/8d6648b4a05291a802ee7771b103608fbead0c6e3333.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>)&minus; the number of vertices in Limak's tree, the number of forbidden pairs of vertices, and the degree of vertex <span class=\"tex-span\">1</span>, respectively.</p><p>The <span class=\"tex-span\"><i>i</i></span>-th of next <span class=\"tex-span\"><i>m</i></span> lines contains two distinct integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>,<i>b</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i>,<i>a</i><sub class=\"lower-index\"><i>i</i></sub>&ne;<i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>)&minus; the <span class=\"tex-span\"><i>i</i></span>-th pair that is <span class=\"tex-font-style-bf\">forbidden</span>. It's guaranteed that each pair of vertices will appear at most once in the input.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print \"<span class=\"tex-font-style-tt\">possible</span>\" (without quotes) if there exists at least one tree satisfying the given conditions. Otherwise, print \"<span class=\"tex-font-style-tt\">impossible</span>\" (without quotes).</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>5 4 2<br/>1 2<br/>2 3<br/>4 2<br/>4 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>possible<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>6 5 3<br/>1 2<br/>1 3<br/>1 4<br/>1 5<br/>1 6<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>impossible<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample, there are <span class=\"tex-span\"><i>n</i>=5</span> vertices. The degree of vertex <span class=\"tex-span\">1</span> should be <span class=\"tex-span\"><i>k</i>=2</span>. All conditions are satisfied for a tree with edges <span class=\"tex-span\">1-5</span>, <span class=\"tex-span\">5-2</span>, <span class=\"tex-span\">1-3</span> and <span class=\"tex-span\">3-4</span>.</p><p>In the second sample, Limak remembers that none of the following edges existed: <span class=\"tex-span\">1-2</span>, <span class=\"tex-span\">1-3</span>, <span class=\"tex-span\">1-4</span>, <span class=\"tex-span\">1-5</span> and <span class=\"tex-span\">1-6</span>. Hence, vertex <span class=\"tex-span\">1</span> couldn't be connected to any other vertex and it implies that there is no suitable tree.</p></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}