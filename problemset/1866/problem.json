{"title": "Hongcow Builds A Nation", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">A. Hongcow Builds A Nation</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Hongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries.</p><p>The world can be modeled as an undirected graph with <span class=\"tex-span\"><i>n</i></span> nodes and <span class=\"tex-span\"><i>m</i></span> edges. <span class=\"tex-span\"><i>k</i></span> of the nodes are home to the governments of the <span class=\"tex-span\"><i>k</i></span> countries that make up the world.</p><p>There is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, <span class=\"tex-font-style-bf\">there is no path between those two nodes</span>. Any graph that satisfies all of these conditions is <span class=\"tex-font-style-it\">stable</span>.</p><p>Hongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of input will contain three integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>m</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;1000</span>, <span class=\"tex-span\">0&le;<i>m</i>&le;100000</span>, <span class=\"tex-span\">1&le;<i>k</i>&le;<i>n</i></span>)&minus; the number of vertices and edges in the graph, and the number of vertices that are homes of the government. </p><p>The next line of input will contain <span class=\"tex-span\"><i>k</i></span> integers <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\">1</sub>,<i>c</i><sub class=\"lower-index\">2</sub>,...,<i>c</i><sub class=\"lower-index\"><i>k</i></sub></span> (<span class=\"tex-span\">1&le;<i>c</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>). These integers will be pairwise distinct and denote the nodes that are home to the governments in this world.</p><p>The following <span class=\"tex-span\"><i>m</i></span> lines of input will contain two integers <span class=\"tex-span\"><i>u</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>u</i><sub class=\"lower-index\"><i>i</i></sub>,<i>v</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>). This denotes an undirected edge between nodes <span class=\"tex-span\"><i>u</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span>.</p><p>It is guaranteed that the graph described by the input is stable.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>4 1 2<br/>1 3<br/>1 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>3 3 1<br/>2<br/>1 2<br/>1 3<br/>2 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>0<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>For the first sample test, the graph looks like this: </p><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/e27c4a25aa7d3ed58b672da7148d12fd8bac2d6e4242.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center> Vertices <span class=\"tex-span\">1</span> and <span class=\"tex-span\">3</span> are special. The optimal solution is to connect vertex <span class=\"tex-span\">4</span> to vertices <span class=\"tex-span\">1</span> and <span class=\"tex-span\">2</span>. This adds a total of <span class=\"tex-span\">2</span> edges. We cannot add any more edges, since vertices <span class=\"tex-span\">1</span> and <span class=\"tex-span\">3</span> cannot have any path between them.<p>For the second sample test, the graph looks like this: </p><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/162c1878de02d31ce8b479cf0556886564919c484242.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center> We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.</div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}