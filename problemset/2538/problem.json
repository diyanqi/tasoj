{"title": "One-Dimensional Battle Ships", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">D. One-Dimensional Battle Ships</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Alice and Bob love playing one-dimensional battle ships. They play on the field in the form of a line consisting of <span class=\"tex-span\"><i>n</i></span> square cells (that is, on a <span class=\"tex-span\">1&times;<i>n</i></span> table).</p><p>At the beginning of the game Alice puts <span class=\"tex-span\"><i>k</i></span> ships on the field without telling their positions to Bob. Each ship looks as a <span class=\"tex-span\">1&times;<i>a</i></span> rectangle (that is, it occupies a sequence of <span class=\"tex-span\"><i>a</i></span> consecutive squares of the field). The ships cannot intersect and even touch each other.</p><p>After that Bob makes a sequence of \"shots\". He names cells of the field and Alice either says that the cell is empty (\"miss\"), or that the cell belongs to some ship (\"hit\").</p><p>But here's the problem! Alice like to cheat. May be that is why she responds to each Bob's move with a \"miss\". </p><p>Help Bob catch Alice cheating &minus; find Bob's first move, such that after it you can be sure that Alice cheated.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains three integers: <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>k</i></span> and <span class=\"tex-span\"><i>a</i></span> (<span class=\"tex-span\">1&le;<i>n</i>,<i>k</i>,<i>a</i>&le;2&middot;10<sup class=\"upper-index\">5</sup></span>) &minus; the size of the field, the number of the ships and the size of each ship. It is guaranteed that the <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>k</i></span> and <span class=\"tex-span\"><i>a</i></span> are such that you can put <span class=\"tex-span\"><i>k</i></span> ships of size <span class=\"tex-span\"><i>a</i></span> on the field, so that no two ships intersect or touch each other.</p><p>The second line contains integer <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">1&le;<i>m</i>&le;<i>n</i></span>) &minus; the number of Bob's moves.</p><p>The third line contains <span class=\"tex-span\"><i>m</i></span> distinct integers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\">1</sub>,<i>x</i><sub class=\"lower-index\">2</sub>,...,<i>x</i><sub class=\"lower-index\"><i>m</i></sub></span>, where <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> is the number of the cell where Bob made the <span class=\"tex-span\"><i>i</i></span>-th shot. The cells are numbered from left to right from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer &minus; the number of such Bob's first move, after which you can be sure that Alice lied. Bob's moves are numbered from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>m</i></span> in the order the were made. If the sought move doesn't exist, then print \"<span class=\"tex-font-style-tt\">-1</span>\".</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>11 3 3<br/>5<br/>4 8 6 1 11<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>5 1 3<br/>2<br/>1 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>-1<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>5 1 3<br/>1<br/>3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}