{"title": "Autocomplete", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">A. Autocomplete</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Autocomplete is a program function that enables inputting the text (in editors, command line shells, browsers etc.) completing the text by its inputted part. Vasya is busy working on a new browser called 'BERowser'. He happens to be working on the autocomplete function in the address line at this very moment. A list consisting of <span class=\"tex-span\"><i>n</i></span> last visited by the user pages and the inputted part <span class=\"tex-span\"><i>s</i></span> are known. Your task is to complete <span class=\"tex-span\"><i>s</i></span> to make it an address of one of the pages from the list. You have to find the lexicographically smallest address having a prefix <span class=\"tex-span\"><i>s</i></span>.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains the <span class=\"tex-span\"><i>s</i></span> line which is the inputted part. The second line contains an integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;100</span>) which is the number of visited pages. Then follow <span class=\"tex-span\"><i>n</i></span> lines which are the visited pages, one on each line. All the lines have lengths of from <span class=\"tex-span\">1</span> to <span class=\"tex-span\">100</span> symbols inclusively and consist of lowercase Latin letters only.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>If <span class=\"tex-span\"><i>s</i></span> is not the beginning of any of <span class=\"tex-span\"><i>n</i></span> addresses of the visited pages, print <span class=\"tex-span\"><i>s</i></span>. Otherwise, print the lexicographically minimal address of one of the visited pages starting from <span class=\"tex-span\"><i>s</i></span>.</p><p>The lexicographical order is the order of words in a dictionary. The lexicographical comparison of lines is realized by the <span class=\"tex-font-style-tt\">'&lt;'</span> operator in the modern programming languages.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>next<br/>2<br/>nextpermutation<br/>nextelement<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>nextelement<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>find<br/>4<br/>find<br/>findfirstof<br/>findit<br/>fand<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>find<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>find<br/>4<br/>fondfind<br/>fondfirstof<br/>fondit<br/>fand<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>find<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}