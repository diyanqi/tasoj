{"title": "Interval Cubing", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">D. Interval Cubing</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>6 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>While learning Computational Geometry, Tiny is simultaneously learning a useful data structure called segment tree or interval tree. He has scarcely grasped it when comes out a strange problem:</p><p>Given an integer sequence <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,<i>a</i><sub class=\"lower-index\">2</sub>,...,<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span>. You should run <span class=\"tex-span\"><i>q</i></span> queries of two types:</p><ol> <li> Given two integers <span class=\"tex-span\"><i>l</i></span> and <span class=\"tex-span\"><i>r</i></span> (<span class=\"tex-span\">1&le;<i>l</i>&le;<i>r</i>&le;<i>n</i></span>), ask the sum of all elements in the sequence <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>l</i></sub>,<i>a</i><sub class=\"lower-index\"><i>l</i>+1</sub>,...,<i>a</i><sub class=\"lower-index\"><i>r</i></sub></span>. </li><li> Given two integers <span class=\"tex-span\"><i>l</i></span> and <span class=\"tex-span\"><i>r</i></span> (<span class=\"tex-span\">1&le;<i>l</i>&le;<i>r</i>&le;<i>n</i></span>), let each element <span class=\"tex-span\"><i>x</i></span> in the sequence <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>l</i></sub>,<i>a</i><sub class=\"lower-index\"><i>l</i>+1</sub>,...,<i>a</i><sub class=\"lower-index\"><i>r</i></sub></span> becomes <span class=\"tex-span\"><i>x</i><sup class=\"upper-index\">3</sup></span>. In other words, apply an assignments <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>l</i></sub>=<i>a</i><sub class=\"lower-index\"><i>l</i></sub><sup class=\"upper-index\">3</sup>,<i>a</i><sub class=\"lower-index\"><i>l</i>+1</sub>=<i>a</i><sub class=\"lower-index\"><i>l</i>+1</sub><sup class=\"upper-index\">3</sup>,...,<i>a</i><sub class=\"lower-index\"><i>r</i></sub>=<i>a</i><sub class=\"lower-index\"><i>r</i></sub><sup class=\"upper-index\">3</sup></span>. </li></ol><p>For every query of type 1, output the answer to it.</p><p>Tiny himself surely cannot work it out, so he asks you for help. In addition, Tiny is a prime lover. He tells you that because the answer may be too huge, you should only output it modulo <span class=\"tex-span\">95542721</span> (this number is a prime number).</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains an integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;10<sup class=\"upper-index\">5</sup></span>), representing the length of the sequence. The second line contains <span class=\"tex-span\"><i>n</i></span> space-separated integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,<i>a</i><sub class=\"lower-index\">2</sub>,...,<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">0&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>&le;10<sup class=\"upper-index\">9</sup></span>).</p><p>The third line contains an integer <span class=\"tex-span\"><i>q</i></span> (<span class=\"tex-span\">1&le;<i>q</i>&le;10<sup class=\"upper-index\">5</sup></span>), representing the number of queries. Then follow <span class=\"tex-span\"><i>q</i></span> lines. Each line contains three integers <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>t</i><sub class=\"lower-index\"><i>i</i></sub>&le;2</span>), <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1&le;<i>l</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>r</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>n</i></span>), where <span class=\"tex-span\"><i>t</i><sub class=\"lower-index\"><i>i</i></sub></span> stands for the type of the query while <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> is the parameters of the query, correspondingly.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each 1-type query, print the answer to it per line.</p><p>You should notice that each printed number should be non-negative and less than <span class=\"tex-span\">95542721</span>.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>8<br/>1 2 3 4 5 6 7 8<br/>5<br/>1 2 5<br/>2 2 5<br/>1 2 5<br/>2 3 6<br/>1 4 7<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>14<br/>224<br/>2215492<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 6000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}