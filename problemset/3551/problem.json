{"title": "Polo the Penguin and XOR operation", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Polo the Penguin and XOR operation</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Little penguin Polo likes permutations. But most of all he likes permutations of integers from <span class=\"tex-span\">0</span> to <span class=\"tex-span\"><i>n</i></span>, inclusive.</p><p>For permutation <span class=\"tex-span\"><i>p</i>=<i>p</i><sub class=\"lower-index\">0</sub>,<i>p</i><sub class=\"lower-index\">1</sub>,...,<i>p</i><sub class=\"lower-index\"><i>n</i></sub></span>, Polo has defined its beauty &minus; number <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/bdedcf70f018faf6eb6c9ee9be21c99d5254bca956.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>.</p><p>Expression <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/6414d574a1ee8301d86f2c5d15396d8dc4328313565656.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> means applying the operation of bitwise excluding \"OR\" to numbers <span class=\"tex-span\"><i>x</i></span> and <span class=\"tex-span\"><i>y</i></span>. This operation exists in all modern programming languages, for example, in language <span class=\"tex-font-style-it\">C++</span> and <span class=\"tex-font-style-it\">Java</span> it is represented as \"<span class=\"tex-font-style-tt\">^</span>\" and in <span class=\"tex-font-style-it\">Pascal</span> &minus; as \"<span class=\"tex-font-style-tt\">xor</span>\".</p><p>Help him find among all permutations of integers from <span class=\"tex-span\">0</span> to <span class=\"tex-span\"><i>n</i></span> the permutation with the maximum beauty.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The single line contains a positive integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;10<sup class=\"upper-index\">6</sup></span>).</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line print integer <span class=\"tex-span\"><i>m</i></span> the maximum possible beauty. In the second line print any permutation of integers from <span class=\"tex-span\">0</span> to <span class=\"tex-span\"><i>n</i></span> with the beauty equal to <span class=\"tex-span\"><i>m</i></span>.</p><p>If there are several suitable permutations, you are allowed to print any of them.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>20<br/>0 2 1 4 3<br/></pre></div></div></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}