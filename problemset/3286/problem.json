{"title": "Fence", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B. Fence</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>There is a fence in front of Polycarpus's home. The fence consists of <span class=\"tex-span\"><i>n</i></span> planks of the same width which go one after another from left to right. The height of the <span class=\"tex-span\"><i>i</i></span>-th plank is <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\"><i>i</i></sub></span> meters, distinct planks can have distinct heights.</p><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/5b81abe03efae614774e7b03984d711a66ba219f2.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> <span class=\"tex-font-size-small\">Fence for <span class=\"tex-span\"><i>n</i>=7</span> and <span class=\"tex-span\"><i>h</i>=[1,2,6,1,1,7,1]</span></span> </center><p>Polycarpus has bought a posh piano and is thinking about how to get it into the house. In order to carry out his plan, he needs to take exactly <span class=\"tex-span\"><i>k</i></span> consecutive planks from the fence. Higher planks are harder to tear off the fence, so Polycarpus wants to find such <span class=\"tex-span\"><i>k</i></span> consecutive planks that the sum of their heights is minimal possible.</p><p>Write the program that finds the indexes of <span class=\"tex-span\"><i>k</i></span> consecutive planks with minimal total height. Pay attention, the fence is not around Polycarpus's home, it is in front of home (in other words, the fence isn't cyclic).</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;1.5&middot;10<sup class=\"upper-index\">5</sup>,1&le;<i>k</i>&le;<i>n</i></span>) &minus; the number of planks in the fence and the width of the hole for the piano. The second line contains the sequence of integers <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\">1</sub>,<i>h</i><sub class=\"lower-index\">2</sub>,...,<i>h</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">1&le;<i>h</i><sub class=\"lower-index\"><i>i</i></sub>&le;100</span>), where <span class=\"tex-span\"><i>h</i><sub class=\"lower-index\"><i>i</i></sub></span> is the height of the <span class=\"tex-span\"><i>i</i></span>-th plank of the fence.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print such integer <span class=\"tex-span\"><i>j</i></span> that the sum of the heights of planks <span class=\"tex-span\"><i>j</i></span>, <span class=\"tex-span\"><i>j</i>+1</span>, ..., <span class=\"tex-span\"><i>j</i>+<i>k</i>-1</span> is the minimum possible. If there are multiple such <span class=\"tex-span\"><i>j</i></span>'s, print any of them.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>7 3<br/>1 2 6 1 1 7 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the sample, your task is to find three consecutive planks with the minimum sum of heights. In the given case three planks with indexes 3, 4 and 5 have the required attribute, their total height is 8.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}