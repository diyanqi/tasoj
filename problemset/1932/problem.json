{"title": "Too Much Money", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Too Much Money</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Alfred wants to buy a toy moose that costs <span class=\"tex-span\"><i>c</i></span> dollars. The store doesn&rsquo;t give change, so he must give the store exactly <span class=\"tex-span\"><i>c</i></span> dollars, no more and no less. He has <span class=\"tex-span\"><i>n</i></span> coins. To make <span class=\"tex-span\"><i>c</i></span> dollars from his coins, he follows the following algorithm: let <span class=\"tex-span\"><i>S</i></span> be the set of coins being used. <span class=\"tex-span\"><i>S</i></span> is initially empty. Alfred repeatedly adds to <span class=\"tex-span\"><i>S</i></span> the highest-valued coin he has such that the total value of the coins in <span class=\"tex-span\"><i>S</i></span> after adding the coin doesn&rsquo;t exceed <span class=\"tex-span\"><i>c</i></span>. If there is no such coin, and the value of the coins in <span class=\"tex-span\"><i>S</i></span> is still less than <span class=\"tex-span\"><i>c</i></span>, he gives up and goes home. Note that Alfred never removes a coin from <span class=\"tex-span\"><i>S</i></span> after adding it.</p><p>As a programmer, you might be aware that Alfred&rsquo;s algorithm can fail even when there is a set of coins with value exactly <span class=\"tex-span\"><i>c</i></span>. For example, if Alfred has one coin worth $3, one coin worth $4, and two coins worth $5, and the moose costs $12, then Alfred will add both of the $5 coins to <span class=\"tex-span\"><i>S</i></span> and then give up, since adding any other coin would cause the value of the coins in <span class=\"tex-span\"><i>S</i></span> to exceed $12. Of course, Alfred could instead combine one $3 coin, one $4 coin, and one $5 coin to reach the total.</p><p>Bob tried to convince Alfred that his algorithm was flawed, but Alfred didn&rsquo;t believe him. Now Bob wants to give Alfred some coins (in addition to those that Alfred already has) such that Alfred&rsquo;s algorithm fails. Bob can give Alfred any number of coins of any denomination (subject to the constraint that each coin must be worth a positive integer number of dollars). There can be multiple coins of a single denomination. He would like to minimize the total value of the coins he gives Alfred. Please find this minimum value. If there is no solution, print \"<span class=\"tex-font-style-tt\">Greed is good</span>\". You can assume that the answer, if it exists, is positive. In other words, Alfred's algorithm will work if Bob doesn't give him any coins.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains <span class=\"tex-span\"><i>c</i></span> (<span class=\"tex-span\">1&le;<i>c</i>&le;200000</span>)&minus; the price Alfred wants to pay. The second line contains <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;200000</span>)&minus; the number of coins Alfred initially has. Then <span class=\"tex-span\"><i>n</i></span> lines follow, each containing a single integer <span class=\"tex-span\"><i>x</i></span> (<span class=\"tex-span\">1&le;<i>x</i>&le;<i>c</i></span>) representing the value of one of Alfred's coins.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>If there is a solution, print the minimum possible total value of the coins in a solution. Otherwise, print \"<span class=\"tex-font-style-tt\">Greed is good</span>\" (without quotes).</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>12<br/>3<br/>5<br/>3<br/>4<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>5<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>50<br/>8<br/>1<br/>2<br/>4<br/>8<br/>16<br/>37<br/>37<br/>37<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>Greed is good<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample, Bob should give Alfred a single coin worth $5. This creates the situation described in the problem statement.</p><p>In the second sample, there is no set of coins that will cause Alfred's algorithm to fail.</p></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}