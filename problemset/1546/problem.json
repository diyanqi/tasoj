{"title": "Okabe and El Psy Kongroo", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Okabe and El Psy Kongroo</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>Okabe likes to take walks but knows that spies from the Organization could be anywhere; that's why he wants to know how many different walks he can take in his city safely. Okabe's city can be represented as all points <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span> such that <span class=\"tex-span\"><i>x</i></span> and <span class=\"tex-span\"><i>y</i></span> are non-negative. Okabe starts at the origin (point <span class=\"tex-span\">(0,0)</span>), and needs to reach the point <span class=\"tex-span\">(<i>k</i>,0)</span>. If Okabe is currently at the point <span class=\"tex-span\">(<i>x</i>,<i>y</i>)</span>, in one step he can go to <span class=\"tex-span\">(<i>x</i>+1,<i>y</i>+1)</span>, <span class=\"tex-span\">(<i>x</i>+1,<i>y</i>)</span>, or <span class=\"tex-span\">(<i>x</i>+1,<i>y</i>-1)</span>.</p><p>Additionally, there are <span class=\"tex-span\"><i>n</i></span> horizontal line segments, the <span class=\"tex-span\"><i>i</i></span>-th of which goes from <span class=\"tex-span\"><i>x</i>=<i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> to <span class=\"tex-span\"><i>x</i>=<i>b</i><sub class=\"lower-index\"><i>i</i></sub></span> inclusive, and is at <span class=\"tex-span\"><i>y</i>=<i>c</i><sub class=\"lower-index\"><i>i</i></sub></span>. It is guaranteed that <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>=0</span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>n</i></sub>&le;<i>k</i>&le;<i>b</i><sub class=\"lower-index\"><i>n</i></sub></span>, and <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub>=<i>b</i><sub class=\"lower-index\"><i>i</i>-1</sub></span> for <span class=\"tex-span\">2&le;<i>i</i>&le;<i>n</i></span>. The <span class=\"tex-span\"><i>i</i></span>-th line segment forces Okabe to walk with <span class=\"tex-span\"><i>y</i></span>-value in the range <span class=\"tex-span\">0&le;<i>y</i>&le;<i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> when his <span class=\"tex-span\"><i>x</i></span> value satisfies <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub>&le;<i>x</i>&le;<i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>, or else he might be spied on. This also means he is required to be under two line segments when one segment ends and another begins.</p><p>Okabe now wants to know how many walks there are from the origin to the point <span class=\"tex-span\">(<i>k</i>,0)</span> satisfying these conditions, modulo <span class=\"tex-span\">10<sup class=\"upper-index\">9</sup>+7</span>.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of input contains the integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;100</span>, <span class=\"tex-span\">1&le;<i>k</i>&le;10<sup class=\"upper-index\">18</sup></span>)&minus; the number of segments and the destination <span class=\"tex-span\"><i>x</i></span> coordinate.</p><p>The next <span class=\"tex-span\"><i>n</i></span> lines contain three space-separated integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>b</i><sub class=\"lower-index\"><i>i</i></sub></span>, and <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">0&le;<i>a</i><sub class=\"lower-index\"><i>i</i></sub>&lt;<i>b</i><sub class=\"lower-index\"><i>i</i></sub>&le;10<sup class=\"upper-index\">18</sup></span>, <span class=\"tex-span\">0&le;<i>c</i><sub class=\"lower-index\"><i>i</i></sub>&le;15</span>)&minus; the left and right ends of a segment, and its <span class=\"tex-span\"><i>y</i></span> coordinate.</p><p>It is guaranteed that <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>=0</span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>n</i></sub>&le;<i>k</i>&le;<i>b</i><sub class=\"lower-index\"><i>n</i></sub></span>, and <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub>=<i>b</i><sub class=\"lower-index\"><i>i</i>-1</sub></span> for <span class=\"tex-span\">2&le;<i>i</i>&le;<i>n</i></span>.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the number of walks satisfying the conditions, modulo <span class=\"tex-span\">1000000007</span> (<span class=\"tex-span\">10<sup class=\"upper-index\">9</sup>+7</span>).</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>1 3<br/>0 3 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>2 6<br/>0 3 0<br/>3 10 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/ef2ddb7a49988a896668e135a2429a6d0c1751c851.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>The graph above corresponds to sample 1. The possible walks are:</p><ul> <li> <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/606c75b4e3d573594f9bad8877589b3168b1d32951.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/71d1534d7ba4eca5317ccd6c22e2d90ed0f2629951.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/6ea05cb9478dce26bec79d6c613f2463998adc9f51.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/9faa6ee6afce00ab0dee4846948153acf3b23b4551.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li></ul><center> <img class=\"tex-graphics\" src=\"http://cf.hustoj.com:80/userfiles/image/09c6b971fe5d780a11e55f494f95be573fa5f1bd51.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>The graph above corresponds to sample 2. There is only one walk for Okabe to reach <span class=\"tex-span\">(3,0)</span>. After this, the possible walks are:</p><ul> <li> <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/ce64869940605d0f698017b34d0d39a59d1fa41a51.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/5e0e843d81ac07a6a04b52246cb0fd09a68e6d7d51.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/d3087c1b8a4f4cfd2be75cc0e8124ea745b14dc251.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li><li> <img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/cd4cd0e38bc315cc6c07425cab2dd433940f3d0951.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </li></ul></div></div><p> </p></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}