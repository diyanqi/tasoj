{"title": "Logo Turtle", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">C. Logo Turtle</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>2 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>A lot of people associate Logo programming language with turtle graphics. In this case the turtle moves along the straight line and accepts commands \"<span class=\"tex-font-style-tt\">T</span>\" (\"turn around\") and \"<span class=\"tex-font-style-tt\">F</span>\" (\"move 1 unit forward\").</p><p>You are given a list of commands that will be given to the turtle. You have to change exactly <span class=\"tex-span\"><i>n</i></span> commands from the list (one command can be changed several times). How far from the starting point can the turtle move after it follows <span class=\"tex-font-style-bf\">all</span> the commands of the modified list?</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of input contains a string <span class=\"tex-span\"><i>commands</i></span> &minus; the original list of commands. The string <span class=\"tex-span\"><i>commands</i></span> contains between 1 and 100 characters, inclusive, and contains only characters \"<span class=\"tex-font-style-tt\">T</span>\" and \"<span class=\"tex-font-style-tt\">F</span>\".</p><p>The second line contains an integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1&le;<i>n</i>&le;50</span>) &minus; the number of commands you have to change in the list.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output the maximum distance from the starting point to the ending point of the turtle's path. The ending point of the turtle's path is turtle's coordinate after it follows <span class=\"tex-font-style-bf\">all</span> the commands of the modified list.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>FT<br/>1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>FFFTFFF<br/>2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>6<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first example the best option is to change the second command (\"<span class=\"tex-font-style-tt\">T</span>\") to \"<span class=\"tex-font-style-tt\">F</span>\" &minus; this way the turtle will cover a distance of 2 units.</p><p>In the second example you have to change two commands. One of the ways to cover maximal distance of 6 units is to change the fourth command and first or last one.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 2000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}