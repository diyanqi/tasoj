{"title": "DZY Loves FFT", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">B. DZY Loves FFT</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>1 second</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p><span class=\"tex-font-style-it\">DZY loves Fast Fourier Transformation, and he enjoys using it.</span></p><p>Fast Fourier Transformation is an algorithm used to calculate convolution. Specifically, if <span class=\"tex-span\"><i>a</i></span>, <span class=\"tex-span\"><i>b</i></span> and <span class=\"tex-span\"><i>c</i></span> are sequences with length <span class=\"tex-span\"><i>n</i></span>, which are indexed from <span class=\"tex-span\">0</span> to <span class=\"tex-span\"><i>n</i>-1</span>, and</p><center class=\"tex-equation\"><img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/6c2a8a5b51c81948c511d8273eed22709cc86f0e10.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></center><p>We can calculate <span class=\"tex-span\"><i>c</i></span> fast using Fast Fourier Transformation.</p><p>DZY made a little change on this formula. Now</p><center class=\"tex-equation\"><img align=\"middle\" class=\"tex-formula\" src=\"http://cf.hustoj.com:80/userfiles/image/8067659c23213d0cdb41c5d51f1d605d7510ed6110.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/></center><p>To make things easier, <span class=\"tex-span\"><i>a</i></span> is a permutation of integers from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>, and <span class=\"tex-span\"><i>b</i></span> is a sequence only containing <span class=\"tex-span\">0</span> and <span class=\"tex-span\">1</span>. Given <span class=\"tex-span\"><i>a</i></span> and <span class=\"tex-span\"><i>b</i></span>, DZY needs your help to calculate <span class=\"tex-span\"><i>c</i></span>.</p><p>Because he is naughty, DZY provides a special way to get <span class=\"tex-span\"><i>a</i></span> and <span class=\"tex-span\"><i>b</i></span>. What you need is only three integers <span class=\"tex-span\"><i>n</i></span>, <span class=\"tex-span\"><i>d</i></span>, <span class=\"tex-span\"><i>x</i></span>. After getting them, use the code below to generate <span class=\"tex-span\"><i>a</i></span> and <span class=\"tex-span\"><i>b</i></span>.</p><pre><br/>//x is 64-bit variable;<br/>function getNextX() {<br/>    x = (x * 37 + 10007) % 1000000007;<br/>    return x;<br/>}<br/>function initAB() {<br/>    for(i = 0; i &lt; n; i = i + 1){<br/>        a[i] = i + 1;<br/>    }<br/>    for(i = 0; i &lt; n; i = i + 1){<br/>        swap(a[i], a[getNextX() % (i + 1)]);<br/>    }<br/>    for(i = 0; i &lt; n; i = i + 1){<br/>        if (i &lt; d)<br/>            b[i] = 1;<br/>        else<br/>            b[i] = 0;<br/>    }<br/>    for(i = 0; i &lt; n; i = i + 1){<br/>        swap(b[i], b[getNextX() % (i + 1)]);<br/>    }<br/>}<br/><br/></pre><p>Operation <span class=\"tex-font-style-tt\">x % y</span> denotes remainder after division <span class=\"tex-span\"><i>x</i></span> by <span class=\"tex-span\"><i>y</i></span>. Function <span class=\"tex-font-style-tt\">swap(x, y)</span> swaps two values <span class=\"tex-span\"><i>x</i></span> and <span class=\"tex-span\"><i>y</i></span>.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The only line of input contains three space-separated integers <span class=\"tex-span\"><i>n</i>,<i>d</i>,<i>x</i>(1&le;<i>d</i>&le;<i>n</i>&le;100000;0&le;<i>x</i>&le;1000000006)</span>. Because DZY is naughty, <span class=\"tex-span\"><i>x</i></span> can't be equal to <span class=\"tex-span\">27777500</span>.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output <span class=\"tex-span\"><i>n</i></span> lines, the <span class=\"tex-span\"><i>i</i></span>-th line should contain an integer <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\"><i>i</i>-1</sub></span>.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>3 1 1<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>1<br/>3<br/>2<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>5 4 2<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>2<br/>2<br/>4<br/>5<br/>5<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>5 4 3<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>5<br/>5<br/>5<br/>5<br/>4<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>In the first sample, <span class=\"tex-span\"><i>a</i></span> is <span class=\"tex-span\">[1 3 2]</span>, <span class=\"tex-span\"><i>b</i></span> is <span class=\"tex-span\">[1 0 0]</span>, so <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\">0</sub>=<i>max</i>(1&middot;1)=1</span>, <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\">1</sub>=<i>max</i>(1&middot;0,3&middot;1)=3</span>, <span class=\"tex-span\"><i>c</i><sub class=\"lower-index\">2</sub>=<i>max</i>(1&middot;0,3&middot;0,2&middot;1)=2</span>.</p><p>In the second sample, <span class=\"tex-span\"><i>a</i></span> is <span class=\"tex-span\">[2 1 4 5 3]</span>, <span class=\"tex-span\"><i>b</i></span> is <span class=\"tex-span\">[1 1 1 0 1]</span>.</p><p>In the third sample, <span class=\"tex-span\"><i>a</i></span> is <span class=\"tex-span\">[5 2 1 4 3]</span>, <span class=\"tex-span\"><i>b</i></span> is <span class=\"tex-span\">[1 1 1 1 0]</span>.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 1000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}