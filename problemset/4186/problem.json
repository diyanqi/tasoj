{"title": "Tree or not Tree", "type": "problem", "description": {"format": "html", "value": "<div class=\"ttypography\"><div class=\"problem-statement\"><div class=\"header\" align=\"center\"><div class=\"title\" style=\"display:none\">E. Tree or not Tree</div><div class=\"time-limit\"><div class=\"property-title\">time limit per test</div>5 seconds</div><div class=\"memory-limit\"><div class=\"property-title\">memory limit per test</div>256 megabytes</div><div class=\"input-file\"><div class=\"property-title\">input</div>standard input</div><div class=\"output-file\"><div class=\"property-title\">output</div>standard output</div></div><div><p>You are given an undirected connected graph <span class=\"tex-span\"><i>G</i></span> consisting of <span class=\"tex-span\"><i>n</i></span> vertexes and <span class=\"tex-span\"><i>n</i></span> edges. <span class=\"tex-span\"><i>G</i></span> contains no self-loops or multiple edges. Let each edge has two states: on and off. Initially all edges are switched off.</p><p>You are also given <span class=\"tex-span\"><i>m</i></span> queries represented as <span class=\"tex-span\">(<i>v</i>,<i>u</i>)</span> &minus; change the state of all edges on the shortest path from vertex <span class=\"tex-span\"><i>v</i></span> to vertex <span class=\"tex-span\"><i>u</i></span> in graph <span class=\"tex-span\"><i>G</i></span>. If there are several such paths, the lexicographically minimal one is chosen. More formally, let us consider all shortest paths from vertex <span class=\"tex-span\"><i>v</i></span> to vertex <span class=\"tex-span\"><i>u</i></span> as the sequences of vertexes <span class=\"tex-span\"><i>v</i>,<i>v</i><sub class=\"lower-index\">1</sub>,<i>v</i><sub class=\"lower-index\">2</sub>,...,<i>u</i></span>. Among such sequences we choose the lexicographically minimal one.</p><p>After each query you should tell how many connected components has the graph whose vertexes coincide with the vertexes of graph <span class=\"tex-span\"><i>G</i></span> and edges coincide with the switched on edges of graph <span class=\"tex-span\"><i>G</i></span>.</p></div><div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">3&le;<i>n</i>&le;10<sup class=\"upper-index\">5</sup></span>, <span class=\"tex-span\">1&le;<i>m</i>&le;10<sup class=\"upper-index\">5</sup></span>). Then <span class=\"tex-span\"><i>n</i></span> lines describe the graph edges as <span class=\"tex-span\"><i>a</i></span> <span class=\"tex-span\"><i>b</i></span> (<span class=\"tex-span\">1&le;<i>a</i>,<i>b</i>&le;<i>n</i></span>). Next <span class=\"tex-span\"><i>m</i></span> lines contain the queries as <span class=\"tex-span\"><i>v</i></span> <span class=\"tex-span\"><i>u</i></span> (<span class=\"tex-span\">1&le;<i>v</i>,<i>u</i>&le;<i>n</i></span>). </p><p>It is guaranteed that the graph is connected, does not have any self-loops or multiple edges.</p></div><div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print <span class=\"tex-span\"><i>m</i></span> lines, each containing one integer &minus; the query results.</p></div><div class=\"sample-tests\"><div class=\"section-title\">Examples</div><div class=\"sample-test\"><div class=\"input\"><div class=\"title\">Input</div><pre>5 2<br/>2 1<br/>4 3<br/>2 4<br/>2 5<br/>4 1<br/>5 4<br/>1 5<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>3<br/>3<br/></pre></div><div class=\"input\"><div class=\"title\">Input</div><pre>6 2<br/>4 6<br/>4 3<br/>1 2<br/>6 5<br/>1 5<br/>1 4<br/>2 5<br/>2 6<br/></pre></div><div class=\"output\"><div class=\"title\">Output</div><pre>4<br/>3<br/></pre></div></div></div><div class=\"note\"><div class=\"section-title\">Note</div><p>Let's consider the first sample. We'll highlight the switched on edges blue on the image. </p><ul><li> <p>The graph before applying any operations. No graph edges are switched on, that's why there initially are 5 connected components. </p><center> <img class=\"tex-graphics\" height=\"189px\" src=\"http://cf.hustoj.com:80/userfiles/image/cd0d9e52010dc5d8ed2b0f7ca6c95c32b887208e40.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"189px\"/> </center></li><li> <p>The graph after query <span class=\"tex-span\"><i>v</i>=5,<i>u</i>=4</span>. We can see that the graph has three components if we only consider the switched on edges. </p><center> <img class=\"tex-graphics\" height=\"189px\" src=\"http://cf.hustoj.com:80/userfiles/image/4414487f324ee1fb478da8ddd4bcf7633f00976540.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"189px\"/> </center></li><li> <p>The graph after query <span class=\"tex-span\"><i>v</i>=1,<i>u</i>=5</span>. We can see that the graph has three components if we only consider the switched on edges. </p><center> <img class=\"tex-graphics\" height=\"189px\" src=\"http://cf.hustoj.com:80/userfiles/image/b8842257ce8984598cebdde80a95435c4e96718440.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"189px\"/> </center></li></ul><p>Lexicographical comparison of two sequences of equal length of <span class=\"tex-span\"><i>k</i></span> numbers should be done as follows. Sequence <span class=\"tex-span\"><i>x</i></span> is lexicographically less than sequence <span class=\"tex-span\"><i>y</i></span> if exists such <span class=\"tex-span\"><i>i</i></span> (<span class=\"tex-span\">1&le;<i>i</i>&le;<i>k</i></span>), so that <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub>&lt;<i>y</i><sub class=\"lower-index\"><i>i</i></sub></span>, and for any <span class=\"tex-span\"><i>j</i></span> (<span class=\"tex-span\">1&le;<i>j</i>&lt;<i>i</i></span>) <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>j</i></sub>=<i>y</i><sub class=\"lower-index\"><i>j</i></sub></span>.</p></div></div></div>\n"}, "tags": ["Codeforces"], "input_description": {"format": "html", "value": ""}, "output_description": {"format": "html", "value": ""}, "test_case_score": [{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}], "hint": {"format": "html", "value": ""}, "time_limit": 5000, "memory_limit": 256, "samples": [{"input": "", "output": ""}], "template": {}, "spj": null, "rule_type": "OI", "source": "", "answers": [{"language": "Python3", "code": "print('Hello, world!')"}]}